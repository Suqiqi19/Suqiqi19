<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>pytorch学习</title>
    <url>/2023/03/21/pytorch%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="pytorch学习"><a href="#pytorch学习" class="headerlink" title="pytorch学习"></a>pytorch学习</h1><h2 id="pytorch简介"><a href="#pytorch简介" class="headerlink" title="pytorch简介"></a>pytorch简介</h2><h3 id="pytorch文档"><a href="#pytorch文档" class="headerlink" title="pytorch文档"></a>pytorch文档</h3><p><a href="https://pytorch.org/docs/stable/index.html">PyTorch documentation — PyTorch 2.0 documentation</a></p>
<h3 id="pytorch定位"><a href="#pytorch定位" class="headerlink" title="pytorch定位"></a>pytorch定位</h3><p>深度学习框架，实现深度学习模型算法</p>
<span id="more"></span>
<h3 id="pytorch实现模型训练"><a href="#pytorch实现模型训练" class="headerlink" title="pytorch实现模型训练"></a>pytorch实现模型训练</h3><p><img src="/2023/03/21/pytorch%E5%AD%A6%E4%B9%A0/训练步骤.png" alt="训练步骤"></p>
<h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><h4 id="python环境"><a href="#python环境" class="headerlink" title="python环境"></a>python环境</h4><p>解释器：python 3.9</p>
<p>工具包：</p>
<ul>
<li><p>内置包：os,sys,re,math等</p>
</li>
<li><p>第三方包：pytorch,numpy等</p>
</li>
</ul>
<p>虚拟环境</p>
<ol>
<li>用Anaconda管理，安装步骤：</li>
<li>下载安装包</li>
<li>设置安装路径</li>
<li>选择添加环境变量</li>
<li>验证</li>
</ol>
<h4 id="python-IDE"><a href="#python-IDE" class="headerlink" title="python IDE"></a>python IDE</h4><p>pycharm或者vs code</p>
<h4 id="pytorch安装"><a href="#pytorch安装" class="headerlink" title="pytorch安装"></a>pytorch安装</h4><p>官网选择合适版本下载</p>
<h4 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建虚拟环境</span></span><br><span class="line">conda create -n name python=x.x</span><br><span class="line"><span class="comment">#激活虚拟环境</span></span><br><span class="line">conda activate name</span><br></pre></td></tr></table></figure>
<h4 id="查看pytorch版本"><a href="#查看pytorch版本" class="headerlink" title="查看pytorch版本"></a>查看pytorch版本</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="built_in">print</span>(torch.__version__)</span><br></pre></td></tr></table></figure>
<h2 id="Tensor"><a href="#Tensor" class="headerlink" title="Tensor"></a>Tensor</h2><p>张量是一个多维数组，是标量，向量，矩阵的高维拓展</p>
<h3 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h3><p>Variable是torch.autograd中的数据类型</p>
<p>主要用于封装Tensor,进行自动求导</p>
<ul>
<li>data:被包装的Tensor</li>
<li>grad:data的梯度</li>
<li>grad_fno创建Tensor的Function,是自动求导的关键</li>
<li>requires_grad:指示是否需要梯度</li>
<li>is leaf:指示是否是叶子结点（张量）</li>
</ul>
<h3 id="Tensor-1"><a href="#Tensor-1" class="headerlink" title="Tensor"></a>Tensor</h3><p>pytorch4.0,Variable并入Tensor</p>
<ul>
<li>dtype:张量的数据类型，如torch.FloatTensor,torch.cuda.FloatTensor</li>
<li>shape:张量的形状，如(64,3,224,224)</li>
<li>device:张量所在设备，GPU/CPU,是加速的关键</li>
</ul>
<h4 id="Tensor的创建"><a href="#Tensor的创建" class="headerlink" title="Tensor的创建"></a>Tensor的创建</h4><h5 id="直接创建"><a href="#直接创建" class="headerlink" title="直接创建"></a>直接创建</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.tensor(</span><br><span class="line">data,</span><br><span class="line">dtype=<span class="literal">None</span>,</span><br><span class="line">device=<span class="literal">None</span>,</span><br><span class="line">requires_grad=<span class="literal">False</span>,</span><br><span class="line">pin_memory=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#功能：从data创建tensor</span></span><br><span class="line"><span class="comment">#data:数据，可以是Iist,numpy，可以是迭代器</span></span><br><span class="line"><span class="comment">#dtype:数据类型，默认与data的一致</span></span><br><span class="line"><span class="comment">#device:所在设备，cuda/cpu</span></span><br><span class="line"><span class="comment">#requires_grad:是否需要梯度pin_memory:是否存于锁页内存</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.from_numpy(ndarray)</span><br><span class="line"></span><br><span class="line"><span class="comment">#功能：从numpy创建tensor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意事项：从torch.from numpy创建的tensor于原ndarray共享内存，当修改其中一个的数据，另外一个也将会被改动</span></span><br></pre></td></tr></table></figure>
<h5 id="依据数值创建"><a href="#依据数值创建" class="headerlink" title="依据数值创建"></a>依据数值创建</h5><h6 id="全0张量"><a href="#全0张量" class="headerlink" title="全0张量"></a>全0张量</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.zeros（）</span><br><span class="line"></span><br><span class="line">torch.zeros(*size,</span><br><span class="line">out=<span class="literal">None</span>,</span><br><span class="line">dtype=<span class="literal">None</span>,</span><br><span class="line">layout=torch.strided,</span><br><span class="line">device=<span class="literal">None</span>,</span><br><span class="line">requires_grad=<span class="literal">False</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">功能：依size创建全0张量</span></span><br><span class="line"><span class="string">size:张量的形状，如(3,3)、(3,</span></span><br><span class="line"><span class="string">out:输出的张量</span></span><br><span class="line"><span class="string">layout:内存中布局形式，有strided,sparse_coo等</span></span><br><span class="line"><span class="string">device:所在设备，gpu/cpu</span></span><br><span class="line"><span class="string">requires_grad:是否需要梯度</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.zeros_like（）</span><br><span class="line"></span><br><span class="line">torch.zeros_like(<span class="built_in">input</span>,</span><br><span class="line">dtype=<span class="literal">None</span>,</span><br><span class="line">layout=<span class="literal">None</span>,</span><br><span class="line">device=<span class="literal">None</span>,</span><br><span class="line">requires_grad=<span class="literal">False</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">功能：依inputi形状创建全0张量</span></span><br><span class="line"><span class="string">·intput:创建与input同形状的全O张量</span></span><br><span class="line"><span class="string">·dtype:数据类型</span></span><br><span class="line"><span class="string">·layout:内存中布局形式</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h6 id="全1张量"><a href="#全1张量" class="headerlink" title="全1张量"></a>全1张量</h6><p>同全0张量一样，只需要将zeros（）改成ones()</p>
<h6 id="自定义数值"><a href="#自定义数值" class="headerlink" title="自定义数值"></a>自定义数值</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.full(size,</span><br><span class="line">fill_value,</span><br><span class="line">out=<span class="literal">None</span>,</span><br><span class="line">dtype=<span class="literal">None</span>,</span><br><span class="line">layout=torch.strided,</span><br><span class="line">device=<span class="literal">None</span>,</span><br><span class="line">requires_grad=<span class="literal">False</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">size:张量的形状</span></span><br><span class="line"><span class="string">fill_value 张量的值</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h6 id="等差数列"><a href="#等差数列" class="headerlink" title="等差数列"></a>等差数列</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.arange(start=<span class="number">0</span>,</span><br><span class="line">end,</span><br><span class="line">step=<span class="number">1</span>,</span><br><span class="line">out=<span class="literal">None</span>,</span><br><span class="line">dtype=<span class="literal">None</span>,</span><br><span class="line">layout=torch.strided,</span><br><span class="line">device=<span class="literal">None</span>,</span><br><span class="line">requires_grad=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#是开区间</span></span><br></pre></td></tr></table></figure>
<h6 id="均分数列"><a href="#均分数列" class="headerlink" title="均分数列"></a>均分数列</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.linspace(start,</span><br><span class="line">end,</span><br><span class="line">steps=<span class="number">100</span>,</span><br><span class="line">out=<span class="literal">None</span>,</span><br><span class="line">dtype=<span class="literal">None</span>,</span><br><span class="line">layout=torch.strided,</span><br><span class="line">device=<span class="literal">None</span>,</span><br><span class="line">requires_grad=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#是闭区间</span></span><br></pre></td></tr></table></figure>
<h6 id="对数均分数列"><a href="#对数均分数列" class="headerlink" title="对数均分数列"></a>对数均分数列</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.logspace(start,</span><br><span class="line">end,</span><br><span class="line">steps=<span class="number">100</span>,</span><br><span class="line">base=<span class="number">10.0</span>,</span><br><span class="line">out=<span class="literal">None</span>,</span><br><span class="line">dtype=<span class="literal">None</span>,</span><br><span class="line">layout=torch.strided,</span><br><span class="line">device=<span class="literal">None</span>,</span><br><span class="line">requires_grad=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#base是底数</span></span><br></pre></td></tr></table></figure>
<h6 id="单位对角矩阵"><a href="#单位对角矩阵" class="headerlink" title="单位对角矩阵"></a>单位对角矩阵</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.eye(n,</span><br><span class="line">m=<span class="literal">None</span>,</span><br><span class="line">out=<span class="literal">None</span>,</span><br><span class="line">dtype=<span class="literal">None</span>,</span><br><span class="line">layout=torch.strided,</span><br><span class="line">device=<span class="literal">None</span>,</span><br><span class="line">requires_grad=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#n行数</span></span><br></pre></td></tr></table></figure>
<h5 id="依据概率创建张量"><a href="#依据概率创建张量" class="headerlink" title="依据概率创建张量"></a>依据概率创建张量</h5><h6 id="正态分布"><a href="#正态分布" class="headerlink" title="正态分布"></a>正态分布</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.normal(mean,</span><br><span class="line">std,</span><br><span class="line">out=<span class="literal">None</span>)</span><br><span class="line"><span class="comment">#mean均值</span></span><br><span class="line"><span class="comment">#std 标准差</span></span><br></pre></td></tr></table></figure>
<p>四种模式</p>
<p>mean为标量，std为标量<br>mean为标量，std为张量<br>mean为张量，std为标量<br>mean为张量，std为张量</p>
<h6 id="标准正态分布"><a href="#标准正态分布" class="headerlink" title="标准正态分布"></a>标准正态分布</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.randn(*size,</span><br><span class="line">out=<span class="literal">None</span>,</span><br><span class="line">dtype=<span class="literal">None</span>,</span><br><span class="line">layout=torch.strided,</span><br><span class="line">device=<span class="literal">None</span>,</span><br><span class="line">requires_grad=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#mean=0,std=1,只要设置size</span></span><br></pre></td></tr></table></figure>
<h6 id="均匀分布"><a href="#均匀分布" class="headerlink" title="均匀分布"></a>均匀分布</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.rand_like()</span><br><span class="line"><span class="comment">#0到1的均匀分布</span></span><br><span class="line">torch.randint(low=<span class="number">0</span>,</span><br><span class="line">high,</span><br><span class="line">size,</span><br><span class="line">out=<span class="literal">None</span>,</span><br><span class="line">dtype=<span class="literal">None</span>,</span><br><span class="line">layout=torch.strided</span><br><span class="line">device=<span class="literal">None</span>,</span><br><span class="line">requires_grad=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<h6 id="随机排列"><a href="#随机排列" class="headerlink" title="随机排列"></a>随机排列</h6><p>0——n-1的随机排列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.randperm(n,</span><br><span class="line">out=<span class="literal">None</span>,</span><br><span class="line">dtype=torch.int64,</span><br><span class="line">layout=torch.strided,</span><br><span class="line">device=<span class="literal">None</span>,</span><br><span class="line">requires_grad=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#n:张量长度</span></span><br></pre></td></tr></table></figure>
<h6 id="伯努利分布"><a href="#伯努利分布" class="headerlink" title="伯努利分布"></a>伯努利分布</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.bernoulli(<span class="built_in">input</span>,</span><br><span class="line">*</span><br><span class="line">generator=<span class="literal">None</span>,</span><br><span class="line">out=<span class="literal">None</span>)</span><br><span class="line"><span class="comment">#input 概率值</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>pytorch</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>MADDPG</title>
    <url>/2023/03/13/MADDPG/</url>
    <content><![CDATA[<h1 id="MADDPG-算法"><a href="#MADDPG-算法" class="headerlink" title="MADDPG 算法"></a>MADDPG 算法</h1><h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>多智能体 DDPG（muli-agent DDPG，MADDPG）是将 DDPG 算法扩展到多智能体环境中，从字面意思上来看就是对于每个智能体实现一个 DDPG 的算法。所有智能体共享一个中心化的 Critic 网络，该 Critic 网络在训练的过程中同时对每个智能体的 Actor 网络给出指导，而执行时每个智能体的 Actor 网络则是完全独立做出行动，即去中心化地执行。</p>
<span id="more"></span>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>算法模型由多个DDPG网络组成，每个网络学习policy π (Actor) 和 action value Q (Critic)；同时具有target network，用于Q-learning的off-policy学习。算法架构图如下：</p>
<p><img src="/2023/03/13/MADDPG/总览图.png" alt="总览图"></p>
<p>每个智能体用 Actor-Critic 的方法训练，在 MADDPG 中每个智能体的 Critic 部分都能够获得其他智能体的策略信息。具体来说，考虑一个有$N$个智能体的博弈，每个智能体的策略参数为$\theta = \left \{  \theta_{1},…\theta_{N}  \right \}$ ,记$\pi = \left \{ \pi_{1},……,\pi_{N} \right \} $ 为所有智能体的策略集合，那么我们可以写出在随机性策略情况下每个智能体的累积期望奖励$J\left(\theta_{i}\right)=E_{s \sim \rho^{\pi}, a_{i} \sim \pi_{\theta_{i}}}\left[\sum_{t=0}^{\infty} \gamma^{t} r_{i, t}\right]$ ,针对随机策略，求策略梯度为：</p>
<script type="math/tex; mode=display">
J\left(\theta_{i}\right)=E_{s \sim \rho^{\pi}, a_{i} \sim \pi_{\theta_{i}}}\left[\sum_{t=0}^{\infty} \gamma^{t} r_{i, t}\right]\nabla_{\theta_{i}} J\left(\theta_{i}\right)=\mathbb{E}_{s \sim p^{\mu}, a \sim \pi_{i}}\left[\nabla_{\theta_{i}} \log \pi_{i}\left(a_{i} \mid o_{i}\right) Q_{i}^{\pi}\left(\mathbf{x}, a_{1}, \ldots, a_{N}\right)\right]</script><p>其中，$Q_{i}^{\pi}\left(\mathbf{x}, a_{1}, \ldots, a_{N}\right)$就是一个中心化的动作价值函数。为什么说$Q_{i}$是一个中心化的动作价值函数呢？一般来说$x=(o_{1},…,o_{N})$包含了所有智能体的观测，另外$Q_{i}$也需要输入所有智能体在此刻的动作，因此$Q_{i}$工作的前提就是所有智能体要同时给出自己的观测和相应的动作。</p>
<p>对于确定性策略来说，考虑现在有N个连续的策略$\mu _{\theta _{i}}$，可以得到 DDPG 的梯度公式：</p>
<script type="math/tex; mode=display">
\nabla_{\theta_i} J\left(\mu_i\right)=\mathbb{E}_{\mathbf{x} \sim \mathcal{D}}\left[\left.\nabla_{\theta_i} \mu_i\left(o_i\right) \nabla_{a_i} Q_i^\mu\left(\mathbf{x}, a_1, \ldots, a_N\right)\right|_{a_i=\mu_i\left(o_i\right)}\right]</script><p>其中，$D$是我们用来存储数据的经验回放池，它存储的每一个数据为$\left(\mathbf{x}, \mathbf{x}^{\prime}, a_1, \ldots, a_N, r_1, \ldots, r_N\right)$。而在 MADDPG 中，中心化动作价值函数可以按照下面的损失函数来更新：</p>
<script type="math/tex; mode=display">
\mathcal{L}\left(\omega_i\right)=\mathbb{E}_{\mathbf{x}, a, r, \mathbf{x}^{\prime}}\left[\left(Q_i^\mu\left(\mathbf{x}, a_1, \ldots, a_N\right)-y\right)^2\right], \quad y=r_i+\left.\gamma Q_i^{\mu^{\prime}}\left(\mathbf{x}^{\prime}, a_1^{\prime}, \ldots, a_N^{\prime}\right)\right|_{a_j^{\prime}=\mu_j^{\prime}\left(o_j\right)}</script><p>流程为：</p>
<p><img src="/2023/03/13/MADDPG/伪代码.png" alt="伪代码"></p>
<h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><h5 id="导入一些需要用到的包。"><a href="#导入一些需要用到的包。" class="headerlink" title="导入一些需要用到的包。"></a>导入一些需要用到的包。</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> rl_utils</span><br></pre></td></tr></table></figure>
<h5 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_env</span>(<span class="params">scenario_name</span>):</span><br><span class="line">    <span class="comment"># 从环境文件脚本中创建环境</span></span><br><span class="line">    scenario = scenarios.load(scenario_name + <span class="string">&quot;.py&quot;</span>).Scenario()</span><br><span class="line">    world = scenario.make_world()</span><br><span class="line">    env = MultiAgentEnv(world, scenario.reset_world, scenario.reward,</span><br><span class="line">                        scenario.observation)</span><br><span class="line">    <span class="keyword">return</span> env</span><br></pre></td></tr></table></figure>
<h5 id="Gumbel-Softmax-采样"><a href="#Gumbel-Softmax-采样" class="headerlink" title="Gumbel-Softmax 采样"></a>Gumbel-Softmax 采样</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">onehot_from_logits</span>(<span class="params">logits, eps=<span class="number">0.01</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 生成最优动作的独热（one-hot）形式 &#x27;&#x27;&#x27;</span></span><br><span class="line">    argmax_acs = (logits == logits.<span class="built_in">max</span>(<span class="number">1</span>, keepdim=<span class="literal">True</span>)[<span class="number">0</span>]).<span class="built_in">float</span>()</span><br><span class="line">    <span class="comment"># 生成随机动作,转换成独热形式</span></span><br><span class="line">    rand_acs = torch.autograd.Variable(torch.eye(logits.shape[<span class="number">1</span>])[[</span><br><span class="line">        np.random.choice(<span class="built_in">range</span>(logits.shape[<span class="number">1</span>]), size=logits.shape[<span class="number">0</span>])</span><br><span class="line">    ]],</span><br><span class="line">                                       requires_grad=<span class="literal">False</span>).to(logits.device)</span><br><span class="line">    <span class="comment"># 通过epsilon-贪婪算法来选择用哪个动作</span></span><br><span class="line">    <span class="keyword">return</span> torch.stack([</span><br><span class="line">        argmax_acs[i] <span class="keyword">if</span> r &gt; eps <span class="keyword">else</span> rand_acs[i]</span><br><span class="line">        <span class="keyword">for</span> i, r <span class="keyword">in</span> <span class="built_in">enumerate</span>(torch.rand(logits.shape[<span class="number">0</span>]))</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sample_gumbel</span>(<span class="params">shape, eps=<span class="number">1e-20</span>, tens_type=torch.FloatTensor</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;从Gumbel(0,1)分布中采样&quot;&quot;&quot;</span></span><br><span class="line">    U = torch.autograd.Variable(tens_type(*shape).uniform_(),</span><br><span class="line">                                requires_grad=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> -torch.log(-torch.log(U + eps) + eps)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gumbel_softmax_sample</span>(<span class="params">logits, temperature</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 从Gumbel-Softmax分布中采样&quot;&quot;&quot;</span></span><br><span class="line">    y = logits + sample_gumbel(logits.shape, tens_type=<span class="built_in">type</span>(logits.data)).to(</span><br><span class="line">        logits.device)</span><br><span class="line">    <span class="keyword">return</span> F.softmax(y / temperature, dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gumbel_softmax</span>(<span class="params">logits, temperature=<span class="number">1.0</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;从Gumbel-Softmax分布中采样,并进行离散化&quot;&quot;&quot;</span></span><br><span class="line">    y = gumbel_softmax_sample(logits, temperature)</span><br><span class="line">    y_hard = onehot_from_logits(y)</span><br><span class="line">    y = (y_hard.to(logits.device) - y).detach() + y</span><br><span class="line">    <span class="comment"># 返回一个y_hard的独热量,但是它的梯度是y,我们既能够得到一个与环境交互的离散动作,又可以</span></span><br><span class="line">    <span class="comment"># 正确地反传梯度</span></span><br><span class="line">    <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure>
<h5 id="单智能体-DDPG"><a href="#单智能体-DDPG" class="headerlink" title="单智能体 DDPG"></a>单智能体 DDPG</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TwoLayerFC</span>(torch.nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num_in, num_out, hidden_dim</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.fc1 = torch.nn.Linear(num_in, hidden_dim)</span><br><span class="line">        self.fc2 = torch.nn.Linear(hidden_dim, hidden_dim)</span><br><span class="line">        self.fc3 = torch.nn.Linear(hidden_dim, num_out)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        <span class="keyword">return</span> self.fc3(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DDPG</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; DDPG算法 &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, state_dim, action_dim, critic_input_dim, hidden_dim,</span></span><br><span class="line"><span class="params">                 actor_lr, critic_lr, device</span>):</span><br><span class="line">        self.actor = TwoLayerFC(state_dim, action_dim, hidden_dim).to(device)</span><br><span class="line">        self.target_actor = TwoLayerFC(state_dim, action_dim,</span><br><span class="line">                                       hidden_dim).to(device)</span><br><span class="line">        self.critic = TwoLayerFC(critic_input_dim, <span class="number">1</span>, hidden_dim).to(device)</span><br><span class="line">        self.target_critic = TwoLayerFC(critic_input_dim, <span class="number">1</span>,</span><br><span class="line">                                        hidden_dim).to(device)</span><br><span class="line">        self.target_critic.load_state_dict(self.critic.state_dict())</span><br><span class="line">        self.target_actor.load_state_dict(self.actor.state_dict())</span><br><span class="line">        self.actor_optimizer = torch.optim.Adam(self.actor.parameters(),</span><br><span class="line">                                                lr=actor_lr)</span><br><span class="line">        self.critic_optimizer = torch.optim.Adam(self.critic.parameters(),</span><br><span class="line">                                                 lr=critic_lr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">take_action</span>(<span class="params">self, state, explore=<span class="literal">False</span></span>):</span><br><span class="line">        action = self.actor(state)</span><br><span class="line">        <span class="keyword">if</span> explore:</span><br><span class="line">            action = gumbel_softmax(action)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            action = onehot_from_logits(action)</span><br><span class="line">        <span class="keyword">return</span> action.detach().cpu().numpy()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">soft_update</span>(<span class="params">self, net, target_net, tau</span>):</span><br><span class="line">        <span class="keyword">for</span> param_target, param <span class="keyword">in</span> <span class="built_in">zip</span>(target_net.parameters(),</span><br><span class="line">                                       net.parameters()):</span><br><span class="line">            param_target.data.copy_(param_target.data * (<span class="number">1.0</span> - tau) +</span><br><span class="line">                                    param.data * tau)</span><br></pre></td></tr></table></figure>
<h5 id="MADDPG-类"><a href="#MADDPG-类" class="headerlink" title="MADDPG 类"></a>MADDPG 类</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MADDPG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, env, device, actor_lr, critic_lr, hidden_dim,</span></span><br><span class="line"><span class="params">                 state_dims, action_dims, critic_input_dim, gamma, tau</span>):</span><br><span class="line">        self.agents = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(env.agents)):</span><br><span class="line">            self.agents.append(</span><br><span class="line">                DDPG(state_dims[i], action_dims[i], critic_input_dim,</span><br><span class="line">                     hidden_dim, actor_lr, critic_lr, device))</span><br><span class="line">        self.gamma = gamma</span><br><span class="line">        self.tau = tau</span><br><span class="line">        self.critic_criterion = torch.nn.MSELoss()</span><br><span class="line">        self.device = device</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">policies</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> [agt.actor <span class="keyword">for</span> agt <span class="keyword">in</span> self.agents]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">target_policies</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> [agt.target_actor <span class="keyword">for</span> agt <span class="keyword">in</span> self.agents]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">take_action</span>(<span class="params">self, states, explore</span>):</span><br><span class="line">        states = [</span><br><span class="line">            torch.tensor([states[i]], dtype=torch.<span class="built_in">float</span>, device=self.device)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(env.agents))</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            agent.take_action(state, explore)</span><br><span class="line">            <span class="keyword">for</span> agent, state <span class="keyword">in</span> <span class="built_in">zip</span>(self.agents, states)</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, sample, i_agent</span>):</span><br><span class="line">        obs, act, rew, next_obs, done = sample</span><br><span class="line">        cur_agent = self.agents[i_agent]</span><br><span class="line"></span><br><span class="line">        cur_agent.critic_optimizer.zero_grad()</span><br><span class="line">        all_target_act = [</span><br><span class="line">            onehot_from_logits(pi(_next_obs))</span><br><span class="line">            <span class="keyword">for</span> pi, _next_obs <span class="keyword">in</span> <span class="built_in">zip</span>(self.target_policies, next_obs)</span><br><span class="line">        ]</span><br><span class="line">        target_critic_input = torch.cat((*next_obs, *all_target_act), dim=<span class="number">1</span>)</span><br><span class="line">        target_critic_value = rew[i_agent].view(</span><br><span class="line">            -<span class="number">1</span>, <span class="number">1</span>) + self.gamma * cur_agent.target_critic(</span><br><span class="line">                target_critic_input) * (<span class="number">1</span> - done[i_agent].view(-<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">        critic_input = torch.cat((*obs, *act), dim=<span class="number">1</span>)</span><br><span class="line">        critic_value = cur_agent.critic(critic_input)</span><br><span class="line">        critic_loss = self.critic_criterion(critic_value,</span><br><span class="line">                                            target_critic_value.detach())</span><br><span class="line">        critic_loss.backward()</span><br><span class="line">        cur_agent.critic_optimizer.step()</span><br><span class="line"></span><br><span class="line">        cur_agent.actor_optimizer.zero_grad()</span><br><span class="line">        cur_actor_out = cur_agent.actor(obs[i_agent])</span><br><span class="line">        cur_act_vf_in = gumbel_softmax(cur_actor_out)</span><br><span class="line">        all_actor_acs = []</span><br><span class="line">        <span class="keyword">for</span> i, (pi, _obs) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(self.policies, obs)):</span><br><span class="line">            <span class="keyword">if</span> i == i_agent:</span><br><span class="line">                all_actor_acs.append(cur_act_vf_in)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                all_actor_acs.append(onehot_from_logits(pi(_obs)))</span><br><span class="line">        vf_in = torch.cat((*obs, *all_actor_acs), dim=<span class="number">1</span>)</span><br><span class="line">        actor_loss = -cur_agent.critic(vf_in).mean()</span><br><span class="line">        actor_loss += (cur_actor_out**<span class="number">2</span>).mean() * <span class="number">1e-3</span></span><br><span class="line">        actor_loss.backward()</span><br><span class="line">        cur_agent.actor_optimizer.step()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_all_targets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> agt <span class="keyword">in</span> self.agents:</span><br><span class="line">            agt.soft_update(agt.actor, agt.target_actor, self.tau)</span><br><span class="line">            agt.soft_update(agt.critic, agt.target_critic, self.tau)</span><br></pre></td></tr></table></figure>
<h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_episodes = <span class="number">5000</span></span><br><span class="line">episode_length = <span class="number">25</span>  <span class="comment"># 每条序列的最大长度</span></span><br><span class="line">buffer_size = <span class="number">100000</span></span><br><span class="line">hidden_dim = <span class="number">64</span></span><br><span class="line">actor_lr = <span class="number">1e-2</span></span><br><span class="line">critic_lr = <span class="number">1e-2</span></span><br><span class="line">gamma = <span class="number">0.95</span></span><br><span class="line">tau = <span class="number">1e-2</span></span><br><span class="line">batch_size = <span class="number">1024</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">update_interval = <span class="number">100</span></span><br><span class="line">minimal_size = <span class="number">4000</span></span><br><span class="line"></span><br><span class="line">env_id = <span class="string">&quot;simple_adversary&quot;</span></span><br><span class="line">env = make_env(env_id)</span><br><span class="line">replay_buffer = rl_utils.ReplayBuffer(buffer_size)</span><br><span class="line"></span><br><span class="line">state_dims = []</span><br><span class="line">action_dims = []</span><br><span class="line"><span class="keyword">for</span> action_space <span class="keyword">in</span> env.action_space:</span><br><span class="line">    action_dims.append(action_space.n)</span><br><span class="line"><span class="keyword">for</span> state_space <span class="keyword">in</span> env.observation_space:</span><br><span class="line">    state_dims.append(state_space.shape[<span class="number">0</span>])</span><br><span class="line">critic_input_dim = <span class="built_in">sum</span>(state_dims) + <span class="built_in">sum</span>(action_dims)</span><br><span class="line"></span><br><span class="line">maddpg = MADDPG(env, device, actor_lr, critic_lr, hidden_dim, state_dims,</span><br><span class="line">                action_dims, critic_input_dim, gamma, tau)</span><br></pre></td></tr></table></figure>
<h5 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">evaluate</span>(<span class="params">env_id, maddpg, n_episode=<span class="number">10</span>, episode_length=<span class="number">25</span></span>):</span><br><span class="line">    <span class="comment"># 对学习的策略进行评估,此时不会进行探索</span></span><br><span class="line">    env = make_env(env_id)</span><br><span class="line">    returns = np.zeros(<span class="built_in">len</span>(env.agents))</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n_episode):</span><br><span class="line">        obs = env.reset()</span><br><span class="line">        <span class="keyword">for</span> t_i <span class="keyword">in</span> <span class="built_in">range</span>(episode_length):</span><br><span class="line">            actions = maddpg.take_action(obs, explore=<span class="literal">False</span>)</span><br><span class="line">            obs, rew, done, info = env.step(actions)</span><br><span class="line">            rew = np.array(rew)</span><br><span class="line">            returns += rew / n_episode</span><br><span class="line">    <span class="keyword">return</span> returns.tolist()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return_list = []  <span class="comment"># 记录每一轮的回报（return）</span></span><br><span class="line">total_step = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i_episode <span class="keyword">in</span> <span class="built_in">range</span>(num_episodes):</span><br><span class="line">    state = env.reset()</span><br><span class="line">    <span class="comment"># ep_returns = np.zeros(len(env.agents))</span></span><br><span class="line">    <span class="keyword">for</span> e_i <span class="keyword">in</span> <span class="built_in">range</span>(episode_length):</span><br><span class="line">        actions = maddpg.take_action(state, explore=<span class="literal">True</span>)</span><br><span class="line">        next_state, reward, done, _ = env.step(actions)</span><br><span class="line">        replay_buffer.add(state, actions, reward, next_state, done)</span><br><span class="line">        state = next_state</span><br><span class="line"></span><br><span class="line">        total_step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> replay_buffer.size(</span><br><span class="line">        ) &gt;= minimal_size <span class="keyword">and</span> total_step % update_interval == <span class="number">0</span>:</span><br><span class="line">            sample = replay_buffer.sample(batch_size)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">stack_array</span>(<span class="params">x</span>):</span><br><span class="line">                rearranged = [[sub_x[i] <span class="keyword">for</span> sub_x <span class="keyword">in</span> x]</span><br><span class="line">                              <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x[<span class="number">0</span>]))]</span><br><span class="line">                <span class="keyword">return</span> [</span><br><span class="line">                    torch.FloatTensor(np.vstack(aa)).to(device)</span><br><span class="line">                    <span class="keyword">for</span> aa <span class="keyword">in</span> rearranged</span><br><span class="line">                ]</span><br><span class="line"></span><br><span class="line">            sample = [stack_array(x) <span class="keyword">for</span> x <span class="keyword">in</span> sample]</span><br><span class="line">            <span class="keyword">for</span> a_i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(env.agents)):</span><br><span class="line">                maddpg.update(sample, a_i)</span><br><span class="line">            maddpg.update_all_targets()</span><br><span class="line">    <span class="keyword">if</span> (i_episode + <span class="number">1</span>) % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        ep_returns = evaluate(env_id, maddpg, n_episode=<span class="number">100</span>)</span><br><span class="line">        return_list.append(ep_returns)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Episode: <span class="subst">&#123;i_episode+<span class="number">1</span>&#125;</span>, <span class="subst">&#123;ep_returns&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">return_array = np.array(return_list)</span><br><span class="line"><span class="keyword">for</span> i, agent_name <span class="keyword">in</span> <span class="built_in">enumerate</span>([<span class="string">&quot;adversary_0&quot;</span>, <span class="string">&quot;agent_0&quot;</span>, <span class="string">&quot;agent_1&quot;</span>]):</span><br><span class="line">    plt.figure()</span><br><span class="line">    plt.plot(</span><br><span class="line">        np.arange(return_array.shape[<span class="number">0</span>]) * <span class="number">100</span>,</span><br><span class="line">        rl_utils.moving_average(return_array[:, i], <span class="number">9</span>))</span><br><span class="line">    plt.xlabel(<span class="string">&quot;Episodes&quot;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&quot;Returns&quot;</span>)</span><br><span class="line">    plt.title(<span class="string">f&quot;<span class="subst">&#123;agent_name&#125;</span> by MADDPG&quot;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MARL</category>
      </categories>
      <tags>
        <tag>多智能体强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>探索与利用</title>
    <url>/2023/03/13/%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h1 id="探索与利用"><a href="#探索与利用" class="headerlink" title="探索与利用"></a>探索与利用</h1><h3 id="序列决策任务中的一个基本问题"><a href="#序列决策任务中的一个基本问题" class="headerlink" title="序列决策任务中的一个基本问题"></a>序列决策任务中的一个基本问题</h3><ul>
<li>Exploitation: 执行能够获得已知最优收益的决策</li>
<li>Exploration: 尝试更多可能的决策，但不一定是最优收益</li>
</ul>
<span id="more"></span>
<h3 id="策略探索的一些原则"><a href="#策略探索的一些原则" class="headerlink" title="策略探索的一些原则"></a>策略探索的一些原则</h3><ul>
<li>朴素方法（Naive Exploration)</li>
</ul>
<ul>
<li>添加策略噪声 e-greddy</li>
</ul>
<ul>
<li>积极初始化（Optimistic initialization)</li>
</ul>
<ul>
<li><p>基于不确定性的度量(Uncertainty Measurement)</p>
<ul>
<li>​    不确定性越大，越有探索价值</li>
</ul>
</li>
</ul>
<pre><code>- ​    上置信界
</code></pre><p>​    <img src="/2023/03/13/%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%88%A9%E7%94%A8/上置信.png" alt="上置信"></p>
<ul>
<li>概率匹配(Probability Matching)</li>
</ul>
<h3 id="多动臂老虎机"><a href="#多动臂老虎机" class="headerlink" title="多动臂老虎机"></a>多动臂老虎机</h3><h4 id="几个点"><a href="#几个点" class="headerlink" title="几个点:"></a>几个点:</h4><p>期望收益采用增量式更新，时间复杂度和空间复杂度都减小。</p>
<p>懊悔值：$ R(a^i)=Q^\star-Q(a^i) $</p>
<p>总懊悔值  ：$\sum_{t=1}^{T}R(a_{t})$</p>
<p>最小化懊悔值 等价于 最大化期望收益</p>
<p>$\sigma_{R}$有下界</p>
<h4 id="贪心策略和-varepsilon-greddy-贪心算法"><a href="#贪心策略和-varepsilon-greddy-贪心算法" class="headerlink" title="贪心策略和$ \varepsilon -greddy$贪心算法"></a>贪心策略和$ \varepsilon -greddy$贪心算法</h4><p><img src="/2023/03/13/%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%88%A9%E7%94%A8/探索策略.png" alt="探索策略"></p>
<p>​    </p>
<p>衰减贪心策略 $\varepsilon$衰减</p>
<p>参考资料：<a href="https://hrl.boyuai.com/chapter/1">https://hrl.boyuai.com/chapter/1</a></p>
]]></content>
      <categories>
        <category>RL</category>
      </categories>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>强化学习概念</title>
    <url>/2023/03/12/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h2 id="强化学习基本概念"><a href="#强化学习基本概念" class="headerlink" title="强化学习基本概念"></a>强化学习基本概念</h2><h3 id="机器学习分类"><a href="#机器学习分类" class="headerlink" title="机器学习分类"></a>机器学习分类</h3><h4 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h4><ul>
<li><p>有监督</p>
</li>
<li><p>无监督</p>
</li>
</ul>
<h4 id="决策"><a href="#决策" class="headerlink" title="决策"></a>决策</h4><ul>
<li>强化学习</li>
</ul>
<span id="more"></span>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>通过从交互中学习来实现目标的计算方法。</p>
<p><strong>三个方面：</strong></p>
<ul>
<li>感知：在某种程度上感知环境的状态 • </li>
<li>行动：可以采取行动来影响状态或者达到目标 </li>
<li>目标：随着时间推移最大化累积奖励</li>
</ul>
<h3 id="交互过程"><a href="#交互过程" class="headerlink" title="交互过程"></a>交互过程</h3><p><img src="/2023/03/12/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E6%A6%82%E5%BF%B5/交互过程.png" alt="交互过程"></p>
<h3 id="要素"><a href="#要素" class="headerlink" title="要素"></a>要素</h3><ol>
<li><p>智能体 agent</p>
<p>能够take一个action，deliver到环境env中，获得reward/</p>
</li>
<li><p>历史（History）是观察、行动和奖励的序列。</p>
<p>𝐻𝑡 = 𝑂1, 𝑅1, 𝐴1,𝑂2, 𝑅2, 𝐴2, … , 𝑂𝑡−1, 𝑅𝑡−1, 𝐴𝑡−1,𝑂𝑡 , 𝑅</p>
</li>
<li><p>状态（state）是一种用于确定接下来会发生的事情（行动、观察、 奖励）的信息</p>
</li>
<li><p>状态是关于历史的函数 𝑆𝑡 = 𝑓(𝐻𝑡)</p>
</li>
<li><p>策略（Policy）是学习智能体在特定时间的行为方式</p>
<ul>
<li><p>是从状态到行动的映射 </p>
</li>
<li><p>确定性策略（Deterministic Policy）  𝑎 = 𝜋(𝑠) （是一个函数）</p>
</li>
<li><p>随机策略（Stochastic Policy）𝜋（ 𝑎| 𝑠） = 𝑃 （𝐴𝑡 = 𝑎 |𝑆𝑡 = 𝑠)（是一个分布）</p>
</li>
</ul>
</li>
<li><p>奖励（Reward）</p>
<ul>
<li><p>一个定义强化学习目标的标量 </p>
</li>
<li><p>能立即感知到什么是“好”的</p>
</li>
</ul>
</li>
<li><p>价值函数（Value Function）</p>
<ul>
<li><p>状态价值是一个标量，用于定义对于长期来说什么是 “好”的</p>
</li>
<li><p>价值函数是对于未来累积奖励的预测</p>
</li>
<li><p>用于评估在给定的策略下，状态的好坏</p>
</li>
<li><script type="math/tex; mode=display">
\begin{aligned}
Q_{\pi}(s, a) & =\mathbb{E}_{\pi}\left[R_{t+1}+\gamma R_{t+2}+\gamma^{2} R_{t+3}+\cdots \mid S_{t}=s, A_{t}=a\right] \\
& =\mathbb{E}_{\pi}\left[R_{t+1}+\gamma Q_{\pi}\left(s^{\prime}, a^{\prime}\right) \mid S_{t}=s, A_{t}=a\right]
\end{aligned}</script></li>
</ul>
</li>
</ol>
<ol>
<li><p>环境的模型（Model）用于模 拟环境的行为</p>
<ul>
<li>预测下一个状态<script type="math/tex; mode=display">
\begin{aligned}
Q_{\pi}(s, a) & =\mathbb{E}_{\pi}\left[R_{t+1}+\gamma R_{t+2}+\gamma^{2} R_{t+3}+\cdots \mid S_{t}=s, A_{t}=a\right] \\
& =\mathbb{E}_{\pi}\left[R_{t+1}+\gamma Q_{\pi}\left(s^{\prime}, a^{\prime}\right) \mid S_{t}=s, A_{t}=a\right]
\end{aligned}\mathcal{P}_{s S^{\prime}}^{a}=\mathbb{P}\left[S_{t+1}=s^{\prime} \mid S_{t}=s, A_{t}=a\right]</script></li>
</ul>
</li>
</ol>
<ul>
<li>预测下一个（立即）奖励</li>
</ul>
<h3 id="强化学习分类"><a href="#强化学习分类" class="headerlink" title="强化学习分类"></a>强化学习分类</h3><p>基于模型的强化学习</p>
<p>模型无关的强化学习</p>
<ol>
<li><p>基于价值：知道什么是好的什么是坏的</p>
<ul>
<li><p>没有策略（隐含）    </p>
</li>
<li><p>价值函数</p>
<script type="math/tex; mode=display">
\nabla_{\theta_{i}} L_{i}\left(\theta_{i}\right)=\mathbb{E}_{s, a \sim \rho(\cdot) ; s^{\prime} \sim \mathcal{E}}\left[\left(r+\gamma \max _{a^{\prime}} Q\left(s^{\prime}, a^{\prime} ; \theta_{i-1}\right)-Q\left(s, a ; \theta_{i}\right)\right) \nabla_{\theta_{i}} Q\left(s, a ; \theta_{i}\right)\right]</script></li>
</ul>
</li>
</ol>
<ol>
<li><p>基于策略：知道怎么行动</p>
<ul>
<li><p>策略</p>
</li>
<li><p>没有价值函数</p>
</li>
</ul>
</li>
<li><p>Actor-Critic：学生听老师的</p>
<ul>
<li><p>策略</p>
</li>
<li><p>价值函数</p>
</li>
</ul>
</li>
</ol>
<p>​                </p>
]]></content>
      <categories>
        <category>RL</category>
      </categories>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>无人机集群自主决策与协同</title>
    <url>/2023/03/10/%E6%97%A0%E4%BA%BA%E6%9C%BA%E9%9B%86%E7%BE%A4%E8%87%AA%E4%B8%BB%E5%86%B3%E7%AD%96%E4%B8%8E%E5%8D%8F%E5%90%8C/</url>
    <content><![CDATA[<h1 id="毕业设计思路及实现"><a href="#毕业设计思路及实现" class="headerlink" title="毕业设计思路及实现"></a>毕业设计思路及实现</h1><h2 id="无人机集群空战攻防对抗模型设计"><a href="#无人机集群空战攻防对抗模型设计" class="headerlink" title="无人机集群空战攻防对抗模型设计"></a>无人机集群空战攻防对抗模型设计</h2><h3 id="对抗场景模型设计"><a href="#对抗场景模型设计" class="headerlink" title="对抗场景模型设计"></a>对抗场景模型设计</h3><span id="more"></span>
<ol>
<li><h4 id="作战单元设计"><a href="#作战单元设计" class="headerlink" title="作战单元设计"></a>作战单元设计</h4><ul>
<li><p>单元种类</p>
<ul>
<li>攻击单元</li>
<li>探测单元</li>
</ul>
</li>
<li><p>单元数量</p>
<ul>
<li>3个</li>
<li>2个</li>
</ul>
</li>
<li><p>位置分布</p>
<p>​    对称分布在两侧</p>
</li>
<li><p>单元属性</p>
<ul>
<li>攻击单元：单元大小$size$，攻击范围$scope$，位置坐标$(pos_x ，pos_y),$速度$(vel_x,vel_y)$，周围敌方智能体数量$num_adv$ , 有效攻击次数$times_{attack}$,被攻击次数$num_{hited}$。</li>
<li>探测单元：单元大小$size$，攻击范围$scope$，位置坐标$(pos_x ，pos_y),$速度$(vel_x,vel_y)$，周围敌方智能体数量$num_adv$ , 有效攻击次数$times_{search}$,被攻击次数$num_{hited}$。</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="对抗规则设计"><a href="#对抗规则设计" class="headerlink" title="对抗规则设计"></a>对抗规则设计</h4><p>红方采用智能算法控制，使智能体自主决策，蓝方采用既定对抗策略。</p>
<h5 id="红方算法选择"><a href="#红方算法选择" class="headerlink" title="红方算法选择"></a>红方算法选择</h5><ul>
<li>MADDPG</li>
</ul>
<h5 id="蓝方对抗策略"><a href="#蓝方对抗策略" class="headerlink" title="蓝方对抗策略"></a>蓝方对抗策略</h5><h6 id="攻击单元"><a href="#攻击单元" class="headerlink" title="攻击单元"></a>攻击单元</h6><ul>
<li>当攻击范围内无处于探测单元探测视角下的被攻击单元，则趋向最近的该类型单元； </li>
<li>否则，攻击单元静止并转为攻击状态</li>
</ul>
<h6 id="探测单元"><a href="#探测单元" class="headerlink" title="探测单元"></a>探测单元</h6><ul>
<li>当探测范围内有被探测单元，探测单元静止；</li>
<li>当探测范围内无被探测单元时，如存在未被探测到攻击己方单元的敌方攻击单元，则趋向最近的该类型单元；</li>
<li>否则趋向最近的被探测单元。</li>
</ul>
</li>
<li><h4 id="判别规则设计"><a href="#判别规则设计" class="headerlink" title="判别规则设计"></a>判别规则设计</h4><p>胜负性判别：设置最大仿真步数为25步，在对局结束时按照双方各单元攻击次数/探测次数与被攻击/探测次数大小比较判定。</p>
</li>
</ol>
<h3 id="动作设计"><a href="#动作设计" class="headerlink" title="动作设计"></a>动作设计</h3><p>​    考虑智能体在二维平面内移动，动作为连续动作，时间离散。加速度和速度都是连续有界的。</p>
<h3 id="状态观测"><a href="#状态观测" class="headerlink" title="状态观测"></a>状态观测</h3><p>​    智能体获得己方智能体的位置，速度信息，以及在智能体攻击或探测范围内的智能体信息。</p>
<h3 id="奖励设计"><a href="#奖励设计" class="headerlink" title="奖励设计"></a>奖励设计</h3><h4 id="定性设计"><a href="#定性设计" class="headerlink" title="定性设计"></a>定性设计</h4><p><img src="/2023/03/10/%E6%97%A0%E4%BA%BA%E6%9C%BA%E9%9B%86%E7%BE%A4%E8%87%AA%E4%B8%BB%E5%86%B3%E7%AD%96%E4%B8%8E%E5%8D%8F%E5%90%8C/奖励函数设计.jpg" alt="奖励函数设计"></p>
<h4 id="定量设计"><a href="#定量设计" class="headerlink" title="定量设计"></a>定量设计</h4><p>$reward = r_episode+r_attack+r_search$</p>
<h5 id="回合奖励-难以实现"><a href="#回合奖励-难以实现" class="headerlink" title="回合奖励  (难以实现)"></a>回合奖励  (难以实现)</h5><script type="math/tex; mode=display">
r\_episode=\left\{
\begin{align}
+100 \qquad 完全胜利，攻击次数与探测次数都多于敌方\\
+50 \qquad 小胜利，攻击次数与探测次数总数多于敌方\\
0\qquad 平局，攻击次数与探测次数总数等敌方\\
-50 \qquad 小失败，攻击次数与探测次数总数少于敌方\\
-100\qquad 完全失败，攻击次数与探测次数都少于敌方
\end{align}
\right.</script><h5 id="攻击单元奖励函数设计"><a href="#攻击单元奖励函数设计" class="headerlink" title="攻击单元奖励函数设计"></a>攻击单元奖励函数设计</h5><script type="math/tex; mode=display">
r=r_{1}+r_{2}+r_{3}\\
\left\{
\begin{align}
r_{1}&=r_{1}+15,    \qquad 攻击敌方一次\\
r_{2}&=r_{2}-15,    \qquad 被攻击一次\\
r_{3}&=r_{3}-10,    \qquad 被探测一次\\
r_{4}&=r_{4}-5,\qquad 碰撞边界
\end{align}
\right.</script><h5 id="探测单元奖励函数设计"><a href="#探测单元奖励函数设计" class="headerlink" title="探测单元奖励函数设计"></a>探测单元奖励函数设计</h5><script type="math/tex; mode=display">
r=r_{1}+r_{2}+r_{3}\\
\left\{
\begin{align}
r_{1}&=r_{1}+12,    \qquad 探测敌方一次\\
r_{2}&=r_{2}-12,    \qquad 被攻击一次\\
r_{3}&=r_{3}-12,    \qquad 被探测一次\\
r_{4}&=r_{4}-5,\qquad 碰撞边界
\end{align}
\right.</script><p>由于同类智能体共享，会出现惰性智能体，所以重新修改奖励函数，对于长期不探索的智能体进行惩罚。由于奖励是根据当前状态与动作给的，当前的智能体无法知道自己上一步的位置，所以设置距离约束的惩罚，如果有智能体距离其他的智能体过远就得到惩罚也能约束智能体。</p>
<script type="math/tex; mode=display">
r=r_{1}+r_{2}+r_{3}\\

\begin{align}
r&=r-3,    \qquad 智能体距离其余己方智能体的距离总和大于2.4，分布太散惩罚，假设每个最大限度是0.6*4 \\
r&=r-3,    \qquad 距离最近单元距离大于0.3，防止某个单元单独不探索，成为Lazy智能体\\
r&=r-3,    \qquad 同类最短距离，防止分散成为两个战场，初始最短为0.4\\
r&=r-3,    \qquad 双方距离过远\\
r&=r+3,    \qquad 双方距离较近
\end{align}</script><h2 id="MADDPG算法实现"><a href="#MADDPG算法实现" class="headerlink" title="MADDPG算法实现"></a>MADDPG算法实现</h2><h3 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h3><p>实验软件环境为 Windows10 操作系统; pytorch深度学习框架；硬件环境为Intel(R) Core(TM) i7-9750H CPU；NVIDIA GeForce GTX 1650</p>
<h3 id="仿真环境"><a href="#仿真环境" class="headerlink" title="仿真环境"></a>仿真环境</h3><p>基础环境：<a href="https://github.com/openai/multiagent-particle-envs">Multi-Agent Particle Environment</a>环境<br>根据对抗场景设计，构建自己的环境。</p>
<h3 id="MADDPG算法原理"><a href="#MADDPG算法原理" class="headerlink" title="MADDPG算法原理"></a>MADDPG算法原理</h3><p>算法模型由多个DDPG网络组成，每个网络学习policy π (Actor) 和 action value Q (Critic)；同时具有target network，用于Q-learning的off-policy学习。算法架构图如下：</p>
<p><img src="/2023/03/10/%E6%97%A0%E4%BA%BA%E6%9C%BA%E9%9B%86%E7%BE%A4%E8%87%AA%E4%B8%BB%E5%86%B3%E7%AD%96%E4%B8%8E%E5%8D%8F%E5%90%8C/总览图.png" alt="总览图"></p>
<p>每个智能体用 Actor-Critic 的方法训练，在 MADDPG 中每个智能体的 Critic 部分都能够获得其他智能体的策略信息。具体来说，考虑一个有$N$个智能体的博弈，每个智能体的策略参数为$\theta = \left \{  \theta_{1},…\theta_{N}  \right \}$ ,记$\pi = \left \{ \pi_{1},……,\pi_{N} \right \} $ 为所有智能体的策略集合，那么我们可以写出在随机性策略情况下每个智能体的累积期望奖励$J\left(\theta_{i}\right)=E_{s \sim \rho^{\pi}, a_{i} \sim \pi_{\theta_{i}}}\left[\sum_{t=0}^{\infty} \gamma^{t} r_{i, t}\right]$ ,针对随机策略，求策略梯度为：</p>
<script type="math/tex; mode=display">
J\left(\theta_{i}\right)=E_{s \sim \rho^{\pi}, a_{i} \sim \pi_{\theta_{i}}}\left[\sum_{t=0}^{\infty} \gamma^{t} r_{i, t}\right]\nabla_{\theta_{i}} J\left(\theta_{i}\right)=\mathbb{E}_{s \sim p^{\mu}, a \sim \pi_{i}}\left[\nabla_{\theta_{i}} \log \pi_{i}\left(a_{i} \mid o_{i}\right) Q_{i}^{\pi}\left(\mathbf{x}, a_{1}, \ldots, a_{N}\right)\right]</script><p>其中，$Q_{i}^{\pi}\left(\mathbf{x}, a_{1}, \ldots, a_{N}\right)$就是一个中心化的动作价值函数。为什么说$Q_{i}$是一个中心化的动作价值函数呢？一般来说$x=(o_{1},…,o_{N})$包含了所有智能体的观测，另外$Q_{i}$也需要输入所有智能体在此刻的动作，因此$Q_{i}$工作的前提就是所有智能体要同时给出自己的观测和相应的动作。</p>
<p>对于确定性策略来说，考虑现在有N个连续的策略$\mu _{\theta _{i}}$，可以得到 DDPG 的梯度公式：</p>
<script type="math/tex; mode=display">
\nabla_{\theta_i} J\left(\mu_i\right)=\mathbb{E}_{\mathbf{x} \sim \mathcal{D}}\left[\left.\nabla_{\theta_i} \mu_i\left(o_i\right) \nabla_{a_i} Q_i^\mu\left(\mathbf{x}, a_1, \ldots, a_N\right)\right|_{a_i=\mu_i\left(o_i\right)}\right]</script><p>其中，$D$是我们用来存储数据的经验回放池，它存储的每一个数据为$\left(\mathbf{x}, \mathbf{x}^{\prime}, a_1, \ldots, a_N, r_1, \ldots, r_N\right)$。而在 MADDPG 中，中心化动作价值函数可以按照下面的损失函数来更新：</p>
<script type="math/tex; mode=display">
\mathcal{L}\left(\omega_i\right)=\mathbb{E}_{\mathbf{x}, a, r, \mathbf{x}^{\prime}}\left[\left(Q_i^\mu\left(\mathbf{x}, a_1, \ldots, a_N\right)-y\right)^2\right], \quad y=r_i+\left.\gamma Q_i^{\mu^{\prime}}\left(\mathbf{x}^{\prime}, a_1^{\prime}, \ldots, a_N^{\prime}\right)\right|_{a_j^{\prime}=\mu_j^{\prime}\left(o_j\right)}</script><p>流程为：</p>
<p><img src="/2023/03/10/%E6%97%A0%E4%BA%BA%E6%9C%BA%E9%9B%86%E7%BE%A4%E8%87%AA%E4%B8%BB%E5%86%B3%E7%AD%96%E4%B8%8E%E5%8D%8F%E5%90%8C/伪代码.png" alt="伪代码"></p>
<h3 id="关键代码实现"><a href="#关键代码实现" class="headerlink" title="关键代码实现"></a>关键代码实现</h3><h4 id="脚本部分"><a href="#脚本部分" class="headerlink" title="脚本部分"></a>脚本部分</h4><h5 id="探测单元脚本"><a href="#探测单元脚本" class="headerlink" title="探测单元脚本"></a>探测单元脚本</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">script_search</span>(<span class="params">self,agent</span>):</span><br><span class="line">    <span class="comment">#当探测范围内有被探测单元，探测单元静止；</span></span><br><span class="line">        near_attack_agent,near_search_agent,near_agnet,num_scope=self.agent_scope(agent)</span><br><span class="line">        <span class="keyword">if</span> num_scope&gt;=<span class="number">1</span>:</span><br><span class="line">               <span class="comment">#探测范围内有被探测单元</span></span><br><span class="line">            agent.state.p_vel =  np.array([<span class="number">0.0</span>,<span class="number">0.0</span>]) <span class="comment">#探测单元静止           </span></span><br><span class="line">    <span class="comment">#当探测范围内无被探测单元时，则趋向最近被该类型单元；</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            agent.state.p_vel=near_agnet.state.p_pos- agent.state.p_pos      <span class="comment">#趋向最近的被探测单元</span></span><br><span class="line">            speed = np.sqrt(np.square(agent.state.p_vel[<span class="number">0</span>]) + np.square(agent.state.p_vel[<span class="number">1</span>]))<span class="comment">#求和速度</span></span><br><span class="line">            <span class="keyword">if</span> speed &gt; agent.max_speed:  <span class="comment">#更新速度</span></span><br><span class="line">                    agent.state.p_vel = agent.state.p_vel / np.sqrt(np.square(agent.state.p_vel[<span class="number">0</span>]) +</span><br><span class="line">                                                                np.square(agent.state.p_vel[<span class="number">1</span>])) * agent.max_speed</span><br><span class="line">    <span class="comment">#位置更新</span></span><br><span class="line">        agent.state.p_pos += agent.state.p_vel * self.dt</span><br></pre></td></tr></table></figure>
<h5 id="攻击单元脚本"><a href="#攻击单元脚本" class="headerlink" title="攻击单元脚本"></a>攻击单元脚本</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##攻击单元脚本</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">script_attack</span>(<span class="params">self,agent</span>):</span><br><span class="line">        <span class="comment">#攻击范围内有被探测单元，攻击单元静止；</span></span><br><span class="line">        near_attack_agent,near_search_agent,near_agnet,num_scope=self.agent_scope(agent)</span><br><span class="line">        <span class="keyword">if</span> num_scope&gt;=<span class="number">1</span>:</span><br><span class="line">               <span class="comment">#攻击范围内有被探测单元</span></span><br><span class="line">            agent.state.p_vel =  np.array([<span class="number">0.0</span>,<span class="number">0.0</span>]) <span class="comment">#探测单元静止           </span></span><br><span class="line">    <span class="comment">#当探测范围内无被探测单元时，则趋向最近被该类型单元；</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            agent.state.p_vel=near_agnet.state.p_pos- agent.state.p_pos      <span class="comment">#趋向最近的被探测单元</span></span><br><span class="line">            speed = np.sqrt(np.square(agent.state.p_vel[<span class="number">0</span>]) + np.square(agent.state.p_vel[<span class="number">1</span>]))<span class="comment">#求和速度</span></span><br><span class="line">            <span class="keyword">if</span> speed &gt; agent.max_speed:  <span class="comment">#更新速度</span></span><br><span class="line">                    agent.state.p_vel = agent.state.p_vel / np.sqrt(np.square(agent.state.p_vel[<span class="number">0</span>]) +</span><br><span class="line">                                                                np.square(agent.state.p_vel[<span class="number">1</span>])) * agent.max_speed</span><br><span class="line">    <span class="comment">#位置更新</span></span><br><span class="line">        agent.state.p_pos += agent.state.p_vel * self.dt</span><br></pre></td></tr></table></figure>
<h4 id="奖励函数部分"><a href="#奖励函数部分" class="headerlink" title="奖励函数部分"></a>奖励函数部分</h4><h5 id="攻击单元奖励"><a href="#攻击单元奖励" class="headerlink" title="攻击单元奖励"></a>攻击单元奖励</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#判断范围内有无智能体</span></span><br><span class="line">dist_adv=[]</span><br><span class="line">sum_dist,min_dist,same_dist=sum_distance(agent) <span class="comment">#与己方距离总和，最短距离，同类距离</span></span><br><span class="line"><span class="comment">#如果adv在agent攻击范围内</span></span><br><span class="line"><span class="keyword">for</span> adv <span class="keyword">in</span> adversaries:</span><br><span class="line">    <span class="comment">#计算agent和adv之间的距离</span></span><br><span class="line">    agent_dist=self.dist(agent,adv)</span><br><span class="line">    <span class="comment">#距离敌方智能体距离</span></span><br><span class="line">    dist_adv.append(agent_dist)</span><br><span class="line">    <span class="comment">#如果在agent的攻击范围内，攻击一次</span></span><br><span class="line">    <span class="keyword">if</span> agent_dist &lt;= agent.scope:</span><br><span class="line">        <span class="comment">#攻击敌方一次</span></span><br><span class="line">        rew += <span class="number">15</span>       <span class="comment">#奖励</span></span><br><span class="line">        agent.times_attack += <span class="number">1</span>     <span class="comment">#攻击次数</span></span><br><span class="line">        agent.num_scope += <span class="number">1</span>        <span class="comment">#在攻击范围内智能体的数量</span></span><br><span class="line">    <span class="comment">#如果在敌方agent的攻击范围内，被攻击一次</span></span><br><span class="line">    <span class="keyword">if</span> agent_dist &lt;= adv.scope:</span><br><span class="line">        <span class="comment">#判断 敌方智能体类型</span></span><br><span class="line">        <span class="keyword">if</span> adv.category:</span><br><span class="line">            <span class="comment">#被攻击一次</span></span><br><span class="line">            rew -= <span class="number">15</span></span><br><span class="line">            agent.times_attacked +=<span class="number">1</span>        <span class="comment">#被攻击次数</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#被探测一次</span></span><br><span class="line">            rew -= <span class="number">10</span></span><br><span class="line">            agent.times_searched += <span class="number">1</span>       <span class="comment">#被探测次数</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;模型3.25日修改部分&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#不攻击，</span></span><br><span class="line"><span class="comment"># if flag:</span></span><br><span class="line"><span class="comment">#     #并且距离远</span></span><br><span class="line"><span class="comment">#     if sum_dist&gt;2:    #距离其余四个智能体的距离大于2.4，给与惩罚</span></span><br><span class="line"><span class="comment">#         rew -= sum_dist</span></span><br><span class="line"><span class="comment"># if min_dist&gt;0.5: #  距离最近的智能体大于0.4（初始距离）</span></span><br><span class="line"><span class="comment">#     rew -= min_dist</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;3.26修改模型，MADDPG效果还可以，但不是很好，MATD3效果 很差&#x27;&#x27;&#x27;</span></span><br><span class="line">sum_dist_adv=<span class="built_in">sum</span>(dist_adv)  <span class="comment">#距离敌方距离之和</span></span><br><span class="line"><span class="comment">#鼓励攻击奖励</span></span><br><span class="line"><span class="keyword">if</span> sum_dist_adv&gt;<span class="number">3.5</span>:    <span class="comment">#双方距离过远</span></span><br><span class="line">    rew -= <span class="number">4</span></span><br><span class="line"><span class="keyword">if</span> sum_dist_adv &lt; <span class="number">1.5</span>:  <span class="comment">#距离较近</span></span><br><span class="line">    rew += <span class="number">4</span></span><br><span class="line"><span class="comment">#对于不攻击，并且距离其余智能体较远的智能体进行惩罚</span></span><br><span class="line"><span class="keyword">if</span> sum_dist &gt; <span class="number">2.4</span>:  <span class="comment">#分布太散惩罚，假设每个最大限度是0.6*4</span></span><br><span class="line">    rew -= <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> min_dist &gt; <span class="number">0.3</span>:      <span class="comment">#距离最近单元，防止某个单元单独不探索，成为Lazy智能体</span></span><br><span class="line">    rew -= <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> same_dist&gt; <span class="number">0.4</span>:    <span class="comment">#同类最短距离，防止分散成为两个战场，初始最短为0.4</span></span><br><span class="line">    rew -= <span class="number">3</span></span><br></pre></td></tr></table></figure>
<h5 id="探测单元奖励"><a href="#探测单元奖励" class="headerlink" title="探测单元奖励"></a>探测单元奖励</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#到敌方智能体距离之和</span></span><br><span class="line">    sum_dist,min_dist,same_dist=sum_distance(agent) <span class="comment">#与己方距离总和，最短距离，同类距离</span></span><br><span class="line">    <span class="comment">#如果adv在agent探测范围内</span></span><br><span class="line">    <span class="keyword">for</span> adv <span class="keyword">in</span> adversaries:</span><br><span class="line">        <span class="comment">#计算agent和adv之间的距离</span></span><br><span class="line">        agent_dist=self.dist(agent,adv)</span><br><span class="line">        <span class="comment">#如果在agent的探测范围内</span></span><br><span class="line">        <span class="keyword">if</span> agent_dist &lt;= agent.scope:</span><br><span class="line">            <span class="comment">#探测敌方一次</span></span><br><span class="line">            rew += <span class="number">12</span></span><br><span class="line">            agent.times_search += <span class="number">1</span>       <span class="comment">#探测次数</span></span><br><span class="line">            agent.num_scope += <span class="number">1</span>        <span class="comment">#在探测范围内智能体的数量</span></span><br><span class="line">        <span class="keyword">if</span> agent_dist &lt;= adv.scope:</span><br><span class="line">            <span class="comment">#判断 敌方智能体类型</span></span><br><span class="line">            <span class="keyword">if</span> adv.category:        <span class="comment">#攻击单元</span></span><br><span class="line">                <span class="comment">#被攻击一次</span></span><br><span class="line">                rew -= <span class="number">12</span></span><br><span class="line">                agent.times_attacked +=<span class="number">1</span>        <span class="comment">#被攻击次数</span></span><br><span class="line">            <span class="keyword">else</span>:                   <span class="comment">#探测单元</span></span><br><span class="line">                <span class="comment">#被探测一次</span></span><br><span class="line">                rew-= <span class="number">12</span></span><br><span class="line">                agent.times_searched += <span class="number">1</span>       <span class="comment">#被探测次数</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;模型3.25日修改部分&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;3.26日修改&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#不探测惩罚项</span></span><br><span class="line">    sum_dist_adv=<span class="built_in">sum</span>(dist_adv)  <span class="comment">#距离敌方距离之和</span></span><br><span class="line">    <span class="comment">#鼓励攻击奖励</span></span><br><span class="line">    <span class="keyword">if</span> sum_dist_adv&gt;<span class="number">3.5</span>:    <span class="comment">#双方距离过远</span></span><br><span class="line">        rew -= <span class="number">4</span></span><br><span class="line">    <span class="keyword">if</span> sum_dist_adv &lt; <span class="number">1.5</span>:  <span class="comment">#距离较近</span></span><br><span class="line">        rew += <span class="number">4</span></span><br><span class="line">    <span class="comment">#对于不攻击，并且距离其余智能体较远的智能体进行惩罚</span></span><br><span class="line">    <span class="keyword">if</span> sum_dist &gt; <span class="number">2.4</span>:  <span class="comment">#分布太散惩罚，假设每个最大限度是0.6*4</span></span><br><span class="line">        rew -= <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span> min_dist &gt; <span class="number">0.3</span>:      <span class="comment">#距离最近单元，防止某个单元单独不探索，成为Lazy智能体</span></span><br><span class="line">        rew -= <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span> same_dist&gt; <span class="number">0.4</span>:    <span class="comment">#同类最短距离，防止分散成为两个战场，初始最短为0.4</span></span><br><span class="line">        rew -= <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="边界惩罚"><a href="#边界惩罚" class="headerlink" title="边界惩罚"></a>边界惩罚</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bound</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">if</span> x &lt; <span class="number">0.9</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> x &lt; <span class="number">1.0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">min</span>(np.exp(<span class="number">2</span> * x - <span class="number">2</span>), <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(world.dim_p):</span><br><span class="line">            x = <span class="built_in">abs</span>(agent.state.p_pos[p])</span><br><span class="line">            rew -= bound(x)</span><br></pre></td></tr></table></figure>
<h4 id="观测部分"><a href="#观测部分" class="headerlink" title="观测部分"></a>观测部分</h4><p>单个智能体能观测都全局智能体的信息，这不是很合理，但是采用部分观测，每次的观测维度不一样，网络结构是无法动态变化的，所以会导致出错。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">observation</span>(<span class="params">self, agent, world</span>):</span><br><span class="line">    </span><br><span class="line">    comm = []</span><br><span class="line">    other_pos = []</span><br><span class="line">    other_vel = []</span><br><span class="line">    <span class="keyword">for</span> other <span class="keyword">in</span> world.agents:</span><br><span class="line">        <span class="keyword">if</span> other <span class="keyword">is</span> agent: <span class="keyword">continue</span></span><br><span class="line">        comm.append(other.state.c)</span><br><span class="line">        other_pos.append(other.state.p_pos - agent.state.p_pos)  <span class="comment">#其他智能体的位置</span></span><br><span class="line">        other_vel.append(other.state.p_vel)   <span class="comment">#其他智能体的速度</span></span><br><span class="line">    <span class="keyword">return</span> np.concatenate([agent.state.p_vel] + [agent.state.p_pos]  + other_vel + other_pos)</span><br></pre></td></tr></table></figure>
<h4 id="MADDPG部分"><a href="#MADDPG部分" class="headerlink" title="MADDPG部分"></a>MADDPG部分</h4><h5 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#三层的全连接网络结构</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TwoLayerFC</span>(torch.nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num_in, num_out, hidden_dim</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.fc1 = torch.nn.Linear(num_in, hidden_dim)          <span class="comment">#线性变换</span></span><br><span class="line">        self.fc2 = torch.nn.Linear(hidden_dim, hidden_dim)</span><br><span class="line">        self.fc3 = torch.nn.Linear(hidden_dim, num_out)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = F.relu(self.fc1(x))  <span class="comment">#激活函数，线性变换的执行</span></span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        <span class="keyword">return</span> self.fc3(x)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="单智能体-DDPG"><a href="#单智能体-DDPG" class="headerlink" title="单智能体 DDPG"></a>单智能体 DDPG</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DDPG</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; DDPG算法 &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, state_dim, action_dim, critic_input_dim, hidden_dim,</span></span><br><span class="line"><span class="params">                 actor_lr, critic_lr, device</span>):</span><br><span class="line"></span><br><span class="line">        self.actor = TwoLayerFC(state_dim, action_dim, hidden_dim).to(device) 				<span class="comment">#model.to(device)数据投入GPU</span></span><br><span class="line">        self.target_actor = TwoLayerFC(state_dim, action_dim,</span><br><span class="line">                                       hidden_dim).to(device)</span><br><span class="line">        self.critic = TwoLayerFC(critic_input_dim, <span class="number">1</span>, hidden_dim).to(device)</span><br><span class="line">        self.target_critic = TwoLayerFC(critic_input_dim, <span class="number">1</span>,</span><br><span class="line">                                        hidden_dim).to(device)</span><br><span class="line">        self.target_critic.load_state_dict(self.critic.state_dict())</span><br><span class="line">        self.target_actor.load_state_dict(self.actor.state_dict())</span><br><span class="line">        <span class="comment">#为需要更新的actor和critic创建优化器</span></span><br><span class="line">        self.actor_optimizer = torch.optim.Adam(self.actor.parameters(),</span><br><span class="line">                                                lr=actor_lr)</span><br><span class="line">        self.critic_optimizer = torch.optim.Adam(self.critic.parameters(),</span><br><span class="line">                                                 lr=critic_lr)</span><br><span class="line">    <span class="comment">#选取动作</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">take_action</span>(<span class="params">self, state, explore=<span class="literal">False</span></span>):</span><br><span class="line">        action = self.actor(state)</span><br><span class="line">        <span class="keyword">if</span> explore:</span><br><span class="line">            action = gumbel_softmax(action)<span class="comment">#离散空间映射到连续空间，能反向传播</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            action = onehot_from_logits(action)</span><br><span class="line">        <span class="keyword">return</span> action.detach().cpu().numpy()[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#软更新来更新target网络</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">soft_update</span>(<span class="params">self, net, target_net, tau</span>):</span><br><span class="line">        <span class="keyword">for</span> param_target, param <span class="keyword">in</span> <span class="built_in">zip</span>(target_net.parameters(),</span><br><span class="line">                                       net.parameters()):</span><br><span class="line">            param_target.data.copy_(param_target.data * (<span class="number">1.0</span> - tau) +</span><br><span class="line">                                    param.data * tau)</span><br></pre></td></tr></table></figure>
<h5 id="MADDPG类"><a href="#MADDPG类" class="headerlink" title="MADDPG类"></a>MADDPG类</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MADDPG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, env, device, actor_lr, critic_lr, hidden_dim,</span></span><br><span class="line"><span class="params">                 state_dims, action_dims, critic_input_dim, gamma, tau</span>):</span><br><span class="line">        self.agents = []</span><br><span class="line">        <span class="comment">#有多个智能体，每个智能体都是一个DDPG实例</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(env.agents)):</span><br><span class="line">            self.agents.append(</span><br><span class="line">                DDPG(state_dims[i],</span><br><span class="line">                 action_dims[i], </span><br><span class="line">                 critic_input_dim,</span><br><span class="line">                hidden_dim, </span><br><span class="line">                actor_lr, </span><br><span class="line">                critic_lr, </span><br><span class="line">                device))</span><br><span class="line">        self.gamma = gamma</span><br><span class="line">        self.tau = tau</span><br><span class="line">        self.critic_criterion = torch.nn.MSELoss()</span><br><span class="line">        self.device = device</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">policies</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> [agt.actor <span class="keyword">for</span> agt <span class="keyword">in</span> self.agents]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">target_policies</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> [agt.target_actor <span class="keyword">for</span> agt <span class="keyword">in</span> self.agents]</span><br><span class="line">    <span class="comment">#做动作</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">take_action</span>(<span class="params">self, states, explore</span>):</span><br><span class="line">        states = [</span><br><span class="line">            torch.tensor([states[i]], dtype=torch.<span class="built_in">float</span>, device=self.device)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.agents))</span><br><span class="line">        ]                               <span class="comment">#将状态集合中的状态分给每个agent</span></span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            agent.take_action(state, explore)</span><br><span class="line">            <span class="keyword">for</span> agent, state <span class="keyword">in</span> <span class="built_in">zip</span>(self.agents, states)</span><br><span class="line">        ]</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, sample, i_agent</span>):</span><br><span class="line">        obs, act, rew, next_obs, done = sample</span><br><span class="line">        <span class="comment">#从replay buffer中采样一条transition</span></span><br><span class="line">        cur_agent = self.agents[i_agent]</span><br><span class="line">        <span class="comment">#current_agent当前需要更新的 agent</span></span><br><span class="line">        cur_agent.critic_optimizer.zero_grad()</span><br><span class="line">        <span class="comment">#清空之前的梯度</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#计算target</span></span><br><span class="line">        all_target_act = [</span><br><span class="line">            onehot_from_logits(pi(_next_obs))</span><br><span class="line">            <span class="keyword">for</span> pi, _next_obs <span class="keyword">in</span> <span class="built_in">zip</span>(self.target_policies, next_obs)</span><br><span class="line">        ]</span><br><span class="line">        <span class="comment">#pi是策略，_next_obs是下一个 观测，pi(_next_obs)是下一个动作，求出所有动作放到列表</span></span><br><span class="line">        target_critic_input = torch.cat((*next_obs, *all_target_act), dim=<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#将状态s和动作a拼接起来作为target_critic网络的输入</span></span><br><span class="line">        <span class="comment">#也就是公式中的x,a1,a2,……an</span></span><br><span class="line">        target_critic_value = rew[i_agent].view(</span><br><span class="line">            -<span class="number">1</span>, <span class="number">1</span>) + self.gamma * cur_agent.target_critic(</span><br><span class="line">                target_critic_input) * (<span class="number">1</span> - done[i_agent].view(-<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">        <span class="comment">#1 - done[i_agent]判断环境有没有终止</span></span><br><span class="line">                <span class="comment">#target_critic_value 目标网络的值，就是y</span></span><br><span class="line">        critic_input = torch.cat((*obs, *act), dim=<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#critic网络输入</span></span><br><span class="line">        critic_value = cur_agent.critic(critic_input)</span><br><span class="line">        <span class="comment">#critic的值，就是Q</span></span><br><span class="line">        critic_loss = self.critic_criterion(critic_value,</span><br><span class="line">                                            target_critic_value.detach())</span><br><span class="line">        <span class="comment">#MSE 损失self.critic_criterion = torch.nn.MSELoss()前面定义好了</span></span><br><span class="line">        critic_loss.backward()<span class="comment">#反向传播</span></span><br><span class="line">        cur_agent.critic_optimizer.step()</span><br><span class="line">        <span class="comment">#更新Actor网络，目标是最大化Q值，用梯度上升的方法</span></span><br><span class="line">        cur_agent.actor_optimizer.zero_grad()   <span class="comment">#梯度清空</span></span><br><span class="line">        <span class="comment">#获取所有的动作</span></span><br><span class="line">        cur_actor_out = cur_agent.actor(obs[i_agent]) </span><br><span class="line">        cur_act_vf_in = gumbel_softmax(cur_actor_out)</span><br><span class="line">        all_actor_acs = []</span><br><span class="line">        <span class="keyword">for</span> i, (pi, _obs) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(self.policies, obs)):</span><br><span class="line">            <span class="keyword">if</span> i == i_agent:</span><br><span class="line">                all_actor_acs.append(cur_act_vf_in)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                all_actor_acs.append(onehot_from_logits(pi(_obs)))</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#拼接s和所有的a</span></span><br><span class="line">        vf_in = torch.cat((*obs, *all_actor_acs), dim=<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#计算损失</span></span><br><span class="line">        actor_loss = -cur_agent.critic(vf_in).mean()</span><br><span class="line">        actor_loss += (cur_actor_out**<span class="number">2</span>).mean() * <span class="number">1e-3</span></span><br><span class="line">        <span class="comment">#反向传播</span></span><br><span class="line">        actor_loss.backward()</span><br><span class="line">        <span class="comment">#优化器更新参数</span></span><br><span class="line">        cur_agent.actor_optimizer.step()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#更新target网络</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_all_targets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> agt <span class="keyword">in</span> self.agents:</span><br><span class="line">            agt.soft_update(agt.actor, agt.target_actor, self.tau)</span><br><span class="line">            agt.soft_update(agt.critic, agt.target_critic, self.tau)</span><br></pre></td></tr></table></figure>
<h5 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_episodes = <span class="number">8000</span> <span class="comment">#训练次数，5000个回合</span></span><br><span class="line">episode_length = <span class="number">25</span>  <span class="comment"># 每条序列的最大长度，每个回合的长度</span></span><br><span class="line">buffer_size = <span class="number">100000</span> <span class="comment">#reply bufffer大小</span></span><br><span class="line">hidden_dim = <span class="number">64</span> <span class="comment">#隐藏层神经元数量</span></span><br><span class="line">actor_lr = <span class="number">1e-2</span> <span class="comment">#学习率</span></span><br><span class="line">critic_lr = <span class="number">1e-2</span> <span class="comment">#学习率</span></span><br><span class="line">gamma = <span class="number">0.95</span> <span class="comment">#衰减</span></span><br><span class="line">tau = <span class="number">1e-2</span> <span class="comment">#目标网络更新系数系数</span></span><br><span class="line">batch_size = <span class="number">1024</span> <span class="comment">#采样数量</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda:0&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">update_interval = <span class="number">100</span> <span class="comment">#采集多少个transition进行一次更新</span></span><br><span class="line">minimal_size = <span class="number">4000</span> <span class="comment">#reply buffer没有达到minimal_size不去训练</span></span><br><span class="line"></span><br><span class="line">env_id = <span class="string">&quot;simple_myenv&quot;</span> <span class="comment">#环境 simple_adversary</span></span><br><span class="line">env = make_env(env_id) <span class="comment">#创建环境</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">replay_buffer = rl_utils.ReplayBuffer(buffer_size)</span><br><span class="line"></span><br><span class="line">state_dims = []<span class="comment">#状态空间维度列表</span></span><br><span class="line">action_dims = []<span class="comment">#动作空间维度列表</span></span><br><span class="line"><span class="keyword">for</span> action_space <span class="keyword">in</span> env.action_space:</span><br><span class="line">    action_dims.append(action_space.n)</span><br><span class="line">    <span class="comment">#print(action_space.n)</span></span><br><span class="line"><span class="keyword">for</span> state_space <span class="keyword">in</span> env.observation_space:</span><br><span class="line">    state_dims.append(state_space.shape[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">#print(state_space.shape[0])#</span></span><br><span class="line">critic_input_dim = <span class="built_in">sum</span>(state_dims) + <span class="built_in">sum</span>(action_dims)</span><br><span class="line"><span class="comment">#critic网络输入维度=状态维度+动作维度</span></span><br><span class="line">maddpg = MADDPG(env, device, actor_lr, critic_lr, hidden_dim, state_dims,</span><br><span class="line">                action_dims, critic_input_dim, gamma, tau)</span><br></pre></td></tr></table></figure>
<h5 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">return_list = []  <span class="comment"># 记录每一轮的累计奖励（return）</span></span><br><span class="line">total_step = <span class="number">0</span></span><br><span class="line">attack_n = []		<span class="comment">#记录攻击次数</span></span><br><span class="line">attacked_n = []		<span class="comment">#记录被攻击次数</span></span><br><span class="line">search_n = []		<span class="comment">#记录探测次数</span></span><br><span class="line">searched_n = []		<span class="comment">#记录被探测次数</span></span><br><span class="line"><span class="comment">#主体部分</span></span><br><span class="line"><span class="keyword">for</span> i_episode <span class="keyword">in</span> <span class="built_in">range</span>(num_episodes):</span><br><span class="line">    <span class="comment">#回合循环</span></span><br><span class="line">    state = env.reset()</span><br><span class="line">    <span class="comment">#重新初始化</span></span><br><span class="line">    <span class="keyword">for</span> agent_i <span class="keyword">in</span> env.agents:</span><br><span class="line">        agent_i.times_attack = <span class="number">0</span></span><br><span class="line">        agent_i.times_attacked = <span class="number">0</span></span><br><span class="line">        agent_i.times_search = <span class="number">0</span></span><br><span class="line">        agent_i.times_searched = <span class="number">0</span></span><br><span class="line">    returns = np.zeros(<span class="built_in">len</span>(env.agents))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> e_i <span class="keyword">in</span> <span class="built_in">range</span>(episode_length):           <span class="comment">#每个回合25步</span></span><br><span class="line">        actions = maddpg.take_action(state, explore=<span class="literal">True</span>)       <span class="comment">#根据状态选取动作</span></span><br><span class="line">        next_state, reward, done, info= env.step(actions)</span><br><span class="line">        reward = np.array(reward)</span><br><span class="line">        returns += reward</span><br><span class="line">        replay_buffer.add(state, actions, reward, next_state, done)</span><br><span class="line">        <span class="comment">#放入replay buffer</span></span><br><span class="line">        state = next_state</span><br><span class="line">        <span class="comment">#更新状态</span></span><br><span class="line">        total_step += <span class="number">1</span></span><br><span class="line">        env.render()</span><br><span class="line">        <span class="keyword">if</span> replay_buffer.size(</span><br><span class="line">        ) &gt;= minimal_size <span class="keyword">and</span> total_step % update_interval == <span class="number">0</span>:</span><br><span class="line">            <span class="comment">#replay buffer中够4000了就开始采样，注意这里用的是rl_utils中的sample函数，随机采样</span></span><br><span class="line">            sample = replay_buffer.sample(batch_size)</span><br><span class="line">            <span class="comment">#数据重整，将a放到一起，s放到一起</span></span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">stack_array</span>(<span class="params">x</span>):</span><br><span class="line">                rearranged = [[sub_x[i] <span class="keyword">for</span> sub_x <span class="keyword">in</span> x]</span><br><span class="line">                              <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x[<span class="number">0</span>]))]</span><br><span class="line">                <span class="keyword">return</span> [</span><br><span class="line">                    torch.FloatTensor(np.vstack(aa)).to(device)</span><br><span class="line">                    <span class="keyword">for</span> aa <span class="keyword">in</span> rearranged</span><br><span class="line">                ]</span><br><span class="line">            <span class="comment">#处理样本sample，更新网络00.</span></span><br><span class="line">            sample = [stack_array(x) <span class="keyword">for</span> x <span class="keyword">in</span> sample]</span><br><span class="line">            <span class="keyword">for</span> a_i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(env.agents)):</span><br><span class="line">                maddpg.update(sample, a_i)</span><br><span class="line">            maddpg.update_all_targets()</span><br><span class="line">    <span class="comment">#记录每一轮回报</span></span><br><span class="line">    return_list.append(returns)</span><br><span class="line">    <span class="comment">#记录攻击/探测次数</span></span><br><span class="line">    times_attack_n = []</span><br><span class="line">    times_attacked_n = []</span><br><span class="line">    times_search_n = []</span><br><span class="line">    times_searched_n = []</span><br><span class="line">    <span class="keyword">for</span> i,agent_i <span class="keyword">in</span> <span class="built_in">enumerate</span>(env.agents):</span><br><span class="line">        <span class="keyword">if</span> i &lt;<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> agent_i.category:</span><br><span class="line">                times_attack_n.append(agent_i.times_attack)<span class="comment">#攻击次数</span></span><br><span class="line">                times_attacked_n.append(agent_i.times_attacked)<span class="comment">#被攻击次数</span></span><br><span class="line">                times_searched_n.append(agent_i.times_searched)<span class="comment">#被探测次数</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                times_search_n.append(agent_i.times_search)<span class="comment">#探测次数</span></span><br><span class="line">                times_attacked_n.append(agent_i.times_attacked)<span class="comment">#被攻击次数</span></span><br><span class="line">                times_searched_n.append(agent_i.times_searched)<span class="comment">#被探测次数</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    attack_n .append(times_attack_n)</span><br><span class="line">    attacked_n .append(times_attacked_n)</span><br><span class="line">    search_n .append(times_search_n)</span><br><span class="line">    searched_n .append(times_searched_n )</span><br><span class="line">    <span class="keyword">if</span> replay_buffer.size()%<span class="number">100</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;transitions的数目&#123;&#125;&quot;</span>.<span class="built_in">format</span>(replay_buffer.size()))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第&#123;&#125;个episode结束,回报为&#123;&#125;,&#x27;</span>.<span class="built_in">format</span>(i_episode,returns))</span><br><span class="line">        </span><br></pre></td></tr></table></figure>
<h5 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h5><p>存储 每一轮的回报，攻击次数，探测次数，被攻击次数，被探测次数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line">return_array = np.array(return_list)</span><br><span class="line">return_data = pd.DataFrame(return_array)</span><br><span class="line"></span><br><span class="line">writer = pd.ExcelWriter(<span class="string">&#x27;return_array.xlsx&#x27;</span>)		<span class="comment"># 写入Excel文件</span></span><br><span class="line">return_data.to_excel(writer, <span class="string">&#x27;page_1&#x27;</span>, float_format=<span class="string">&#x27;%.5f&#x27;</span>)		<span class="comment"># ‘page_1’是写入excel的sheet名</span></span><br><span class="line">writer.save()</span><br><span class="line">writer.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">attack_array = np.array(attack_n)</span><br><span class="line">attack_data = pd.DataFrame(attack_array)</span><br><span class="line"></span><br><span class="line">writer = pd.ExcelWriter(<span class="string">&#x27;attack.xlsx&#x27;</span>)		<span class="comment"># 写入Excel文件</span></span><br><span class="line">attack_data.to_excel(writer, <span class="string">&#x27;page_1&#x27;</span>, float_format=<span class="string">&#x27;%.5f&#x27;</span>)		</span><br><span class="line">writer.save()</span><br><span class="line">writer.close()</span><br><span class="line"></span><br><span class="line">search_array = np.array(search_n)</span><br><span class="line">search_data = pd.DataFrame(search_array)</span><br><span class="line"></span><br><span class="line">writer = pd.ExcelWriter(<span class="string">&#x27;search.xlsx&#x27;</span>)		<span class="comment"># 写入Excel文件</span></span><br><span class="line">search_data.to_excel(writer, <span class="string">&#x27;page_1&#x27;</span>, float_format=<span class="string">&#x27;%.5f&#x27;</span>)		</span><br><span class="line">writer.save()</span><br><span class="line">writer.close()</span><br><span class="line"></span><br><span class="line">attacked_array = np.array(attacked_n)</span><br><span class="line">attacked_data = pd.DataFrame(attacked_array)</span><br><span class="line"></span><br><span class="line">writer = pd.ExcelWriter(<span class="string">&#x27;attacked.xlsx&#x27;</span>)		<span class="comment"># 写入Excel文件</span></span><br><span class="line">attacked_data.to_excel(writer, <span class="string">&#x27;page_1&#x27;</span>, float_format=<span class="string">&#x27;%.5f&#x27;</span>)		</span><br><span class="line">writer.save()</span><br><span class="line">writer.close()</span><br><span class="line"></span><br><span class="line">searched_array = np.array(searched_n)</span><br><span class="line">searched_data = pd.DataFrame(searched_array)</span><br><span class="line"></span><br><span class="line">writer = pd.ExcelWriter(<span class="string">&#x27;searched.xlsx&#x27;</span>)		<span class="comment"># 写入Excel文件</span></span><br><span class="line">searched_data.to_excel(writer, <span class="string">&#x27;page_1&#x27;</span>, float_format=<span class="string">&#x27;%.5f&#x27;</span>)		<span class="comment"># ‘page_1’是写入excel的sheet名</span></span><br><span class="line">writer.save()</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>
<h5 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h5><h6 id="绘制回报曲线"><a href="#绘制回报曲线" class="headerlink" title="绘制回报曲线"></a>绘制回报曲线</h6><h6 id="绘制攻击数据曲线"><a href="#绘制攻击数据曲线" class="headerlink" title="绘制攻击数据曲线"></a>绘制攻击数据曲线</h6><h6 id="绘制胜负平率"><a href="#绘制胜负平率" class="headerlink" title="绘制胜负平率"></a>绘制胜负平率</h6><h4 id="没有实现的部分"><a href="#没有实现的部分" class="headerlink" title="没有实现的部分"></a>没有实现的部分</h4><p>在奖励中，每一个回合结束之后的奖励没有实现，因为之前的奖励都是给动作的，reply_buffer中存储的都是五元组，回合之后的奖励不清楚应该给什么。</p>
<h2 id="MATD3算法实现"><a href="#MATD3算法实现" class="headerlink" title="MATD3算法实现"></a>MATD3算法实现</h2><h3 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h3><p>Delayed Double Critics DDPG for N-Agents Population 双延迟深度确定性策略梯度</p>
<p>参考文献：A TD3-based multi-agent deep reinforcement learning method in mixed cooperation-competition environment</p>
<p>在TD3中，我们可以用了两套网络估算Q值，相对较小的那个作为我们更新的目标。</p>
<p>Dalayed ，是actor更新的delay。也就是说相对于critic可以更新多次后，actor再进行更新。</p>
<h2 id="对比实验设计"><a href="#对比实验设计" class="headerlink" title="对比实验设计"></a>对比实验设计</h2><ol>
<li>MADDPG</li>
<li>PER_MADDPG    难以实现</li>
<li>MATD3</li>
<li>PER_MATD3</li>
<li>MADDPG奖励设置对比<ol>
<li>全局共享奖励</li>
<li>同类智能体共享奖励</li>
</ol>
</li>
</ol>
<h3 id="PER原理"><a href="#PER原理" class="headerlink" title="PER原理"></a>PER原理</h3><p>带有优先级采样方法会根据模型对当前样本的表现情况，给予样本不同的采样权重，打破了传统的均匀采样方法，提高了样本的利用率和学习效率。相比而言，带优先级的经验重放主要额外增加了以下两步：</p>
<ol>
<li>样本优先级的设置；</li>
<li>基于优先级的采样。</li>
</ol>
<p>样本优先级可以采用强化学习中 TD 偏差来衡量：</p>
<script type="math/tex; mode=display">
T D-e r r o r=R(s, a)+\gamma Q(s, a)-Q(s, a)</script><p>TD 偏差越大，说明智能体在该状态处的参数更新量越大，该样本的学习价值越高。设经验样本 i 对应的TD 偏差为 $δi $，对该经验样本的采样概率为：</p>
<script type="math/tex; mode=display">
P(i)=\frac{p_i^\alpha}{\sum_k p_k^\alpha}</script><p>其中，$p_i$为每个样本的权值，即 TD 偏差的绝对值（|δi|），指数 α 决定了使用带优先级采样的程度，当 α等于 0 时为均匀采样。对于基于优先级的采样方法和经验重放缓存样本优先级的维护，可以使用一种完全二叉树结构 SumTree 来实现，其中叶子节点顺序存放每个样本的优先级 P(i) 。在采样时，依据根节点的优<br>先级总和，均分为 $n =∑P(i)/BATCH_SIZE$ 个区间，在<br>每个区间内随机取一个数值，按照二分查找的方式找到对应的叶子节点。</p>
<p>原理图：</p>
<p><img src="/2023/03/10/%E6%97%A0%E4%BA%BA%E6%9C%BA%E9%9B%86%E7%BE%A4%E8%87%AA%E4%B8%BB%E5%86%B3%E7%AD%96%E4%B8%8E%E5%8D%8F%E5%90%8C/PER原理.png" alt="PER原理"></p>
<p>具体训练流程:</p>
<p><img src="/2023/03/10/%E6%97%A0%E4%BA%BA%E6%9C%BA%E9%9B%86%E7%BE%A4%E8%87%AA%E4%B8%BB%E5%86%B3%E7%AD%96%E4%B8%8E%E5%8D%8F%E5%90%8C/流程.png" alt="流程"></p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple, deque</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrioritizedReplay</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Fixed-size buffer to store prioritized experience tuples.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,batch_size, capacity,seed, alpha</span>):</span><br><span class="line">        self.buffer = deque(maxlen=capacity)</span><br><span class="line">        self.priorities = deque(maxlen=capacity)</span><br><span class="line">        self.batch_size = batch_size</span><br><span class="line">        self.seed = random.seed(seed)</span><br><span class="line">        self.alpha = alpha</span><br><span class="line">        self.epsilon = <span class="number">1e-5</span> </span><br><span class="line">          </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, state, action, reward, next_state, done, priority</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Add a new experience to memory.&quot;&quot;&quot;</span></span><br><span class="line">        self.buffer.append((state, action, reward, next_state, done)) </span><br><span class="line">        self.priorities.append(priority)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sample</span>(<span class="params">self, beta</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Randomly sample a batch of experiences from memory.&quot;&quot;&quot;</span></span><br><span class="line">        priorities = np.array(self.priorities).reshape(-<span class="number">1</span>)</span><br><span class="line">        priorities = np.power(priorities + self.epsilon, self.alpha)  <span class="comment"># add a small value epsilon to ensure numeric stability</span></span><br><span class="line">        p = priorities/np.<span class="built_in">sum</span>(priorities)  <span class="comment"># compute a probability density over the priorities</span></span><br><span class="line">        sampled_indices = np.random.choice(np.arange(<span class="built_in">len</span>(p)), size=self.batch_size, p=p)  <span class="comment"># choose random indices given p</span></span><br><span class="line">        transitions = [self.buffer[i] <span class="keyword">for</span> i <span class="keyword">in</span> sampled_indices]     <span class="comment"># subset the experiences</span></span><br><span class="line">        p = np.array([p[i] <span class="keyword">for</span> i <span class="keyword">in</span> sampled_indices]).reshape(-<span class="number">1</span>)</span><br><span class="line">        state, action, reward, next_state, done = <span class="built_in">zip</span>(*transitions)</span><br><span class="line">        weights = np.power(<span class="built_in">len</span>(transitions) * p, -beta)</span><br><span class="line">        weights /= weights.<span class="built_in">max</span>()</span><br><span class="line">        weights = torch.from_numpy(weights).<span class="built_in">float</span>().to(device)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> np.array(state), action, reward, np.array(next_state), done </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, indices, priorities</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Update the priority values after training given the samples drawn.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i, priority <span class="keyword">in</span> <span class="built_in">zip</span>(indices, priorities):</span><br><span class="line">            self.priorities[i] = priority</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>): </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.buffer)</span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<h2 id="未实现的部分"><a href="#未实现的部分" class="headerlink" title="未实现的部分"></a>未实现的部分</h2><h3 id="奖励函数部分-1"><a href="#奖励函数部分-1" class="headerlink" title="奖励函数部分"></a>奖励函数部分</h3><p>在奖励中，每一个回合结束之后的奖励没有实现，因为之前的奖励都是给动作的，reply_buffer中存储的都是五元组，回合之后的奖励不清楚应该给什么。</p>
<h3 id="PER部分"><a href="#PER部分" class="headerlink" title="PER部分"></a>PER部分</h3><p>没有实现优先权重的更新，PER还没有完全融入MADDPG中。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>每更新一步，从当前状态state，执行一个动作action，产生一个奖励reward，环境更新为写一个状态next_state，所以将每一个（state, action, reward, next_state, done)五元组存入Replaybuffer中，但是优先经验回放需要将TD-error存入，以计算采样优先程度。</p>
]]></content>
      <categories>
        <category>毕设</category>
      </categories>
      <tags>
        <tag>毕设</tag>
      </tags>
  </entry>
  <entry>
    <title>决策的基本概念</title>
    <url>/2023/03/10/%E5%86%B3%E7%AD%96%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h2 id="决策的基本概念"><a href="#决策的基本概念" class="headerlink" title="决策的基本概念"></a>决策的基本概念</h2><span id="more"></span>
<h3 id="决策的概念"><a href="#决策的概念" class="headerlink" title="决策的概念"></a><strong>决策的概念</strong></h3><p>狭义理解：决策就是做出决定，仅限于人们从不方案中做出最佳选择</p>
<p>广义理解：把决策看作一个过程；即人们为了实现某一目标，在占有一定信息和经验的基础上，根据主客观条件的可能性，提出各种可行的方案，采用一定的科学方法和手段，进行比较，分析和评价，按照决策准则，从中筛选出最满意方案，并根据方案实施的反馈情况进行修整控制直至目标实现的整个系统过程。</p>
<h3 id="基本要素"><a href="#基本要素" class="headerlink" title="基本要素"></a><strong>基本要素</strong></h3><p> 决策者：决策者即决策主体，可以是个体，也可以是群体。</p>
<p> 决策目标：决策者必须有一个希 望达到的明确的目标，可以是单个目标，也可以是 多个目标。</p>
<p> 决策方案：存在着供人们选择的不同的决策方案</p>
<p> 自然状态：决策者无法控制但可以预见的决策环境客观存在的各种状态。</p>
<p> 决策后果：即各种决策方案在不同自然状态下所出现的结果。</p>
<p> 决策准则：是评价方案是否达到决策目标的价值标准，也是选择方案的依据。</p>
<h3 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a><strong>基本步骤</strong></h3><p> 发现和分析问题</p>
<p> 确定决策目标</p>
<p> 拟定各种可行方案<br> 分析比较各种备择方案，从中选择最优方案</p>
<p> 决策的执行，反馈与调整</p>
<p><img src="/2023/03/10/%E5%86%B3%E7%AD%96%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/决策步骤.png" alt="决策步骤"></p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>？？？</p>
<h3 id="决策的分类"><a href="#决策的分类" class="headerlink" title="决策的分类"></a><em>决策的分类</em></h3><div class="table-container">
<table>
<thead>
<tr>
<th>分类角度</th>
<th>分类</th>
</tr>
</thead>
<tbody>
<tr>
<td>决策主体</td>
<td>个人\</td>
<td>组织</td>
</tr>
<tr>
<td>决策影响范围</td>
<td>战略\</td>
<td>管理\</td>
<td>业务</td>
</tr>
<tr>
<td>决策程序的规范性</td>
<td>程序化\</td>
<td>非程序化</td>
</tr>
<tr>
<td>决策的确定性</td>
<td>确定性\</td>
<td>不确定型</td>
</tr>
<tr>
<td>决策过程的连续性</td>
<td>单项\</td>
<td>序贯</td>
</tr>
<tr>
<td>决策目标个数</td>
<td>单目标\</td>
<td>多目标</td>
</tr>
<tr>
<td>定性定量特性</td>
<td>定量\</td>
<td>定性</td>
</tr>
</tbody>
</table>
</div>
<h3 id="实际决策过程的难点"><a href="#实际决策过程的难点" class="headerlink" title="实际决策过程的难点"></a>实际决策过程的难点</h3><p>​    无法确保决策措施得以顺利实施的“现实前提条件”与决策者心中墨认的 “理想条件”是否一致,是决策人最需要重视的问题,全面正确的分析“现实前提条件”与“理 想条件”的差异是决策的主要难点.无论是大 方向上的决策措施,还是决策中的细分计划, 要想顺利实施必然有其各自的前提条件,我们称这些前提条件为“理想条件”,当现 实 条件 与 这 个前 提 不 相适 应 时,就要想办法打通这些环节,尽可能让现条件与决策理想条件相符, 这样决策措施才能顺利实施,最终达到决策者的目的.如果事先对“现实前提条件” 与“理想条件”的差异分析不够往往就导致问题的解决不彻底,也就直接影响到决策措施是否能够最终顺利实施.所以正确分析这里的“差异”是相当重要的.</p>
<h3 id="主要的决策陷阱"><a href="#主要的决策陷阱" class="headerlink" title="主要的决策陷阱"></a>主要的决策陷阱</h3><p>“沉锚”陷阱：</p>
<p>“有利证据”陷阱</p>
<p>“框架”陷阱：</p>
<p>“霍布森选择”的陷阱</p>
<p>“布里丹选择”的陷阱</p>
<p>“群体思维”的陷阱</p>
]]></content>
  </entry>
  <entry>
    <title>hexo博客</title>
    <url>/2023/03/09/hexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="在gitee搭建hexo"><a href="#在gitee搭建hexo" class="headerlink" title="在gitee搭建hexo"></a>在gitee搭建hexo</h1><h4 id="安装Node-js环境"><a href="#安装Node-js环境" class="headerlink" title="安装Node.js环境"></a>安装Node.js环境</h4><p><a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a> </p>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 确认node.js安装成功：运行下面两个命令打印版本号即可</span></span><br><span class="line">node -v</span><br><span class="line">npm  -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Node.js 淘宝镜像加速器 （cnpm）</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 node 类库默认安装位置</span></span><br><span class="line"><span class="comment"># 默认是在 C:\Users\lingStudy\AppData\Roaming\npm</span></span><br><span class="line"></span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;D:\nodejs安装路径\node_global&quot;</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\nodejs安装路径\node_cache&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#尤其要注意环境变量的设置</span></span><br><span class="line"><span class="comment"># 查看修改是否成功</span></span><br><span class="line">npm root -g</span><br><span class="line"><span class="comment"># 然后把D:\install\node\node_global配置到环境变量的 PATH 下即可</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="安装版本控制工具-Git"><a href="#安装版本控制工具-Git" class="headerlink" title="安装版本控制工具 Git"></a>安装版本控制工具 Git</h4><p>用来将本地项目托管到码云，所以还需要自己注册一个码云的账号。</p>
<p><a href="https://git-scm.com/download">https://git-scm.com/download</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Git一些重要配置</span></span><br><span class="line">git config --global user.name <span class="string">&quot;lxxxxdy&quot;</span>  <span class="comment">#码云用户名</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxx83@qq.com&quot;</span>   <span class="comment">#邮箱</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成SSH公钥并添加到码云，实现免密码登录</span></span><br><span class="line"><span class="comment"># 1、生成公钥</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line"><span class="comment"># 2、进入 C:\Users\主机名\.ssh 目录，把 id_rsa.pub 里面的信息复制到码云的 SSH公钥 中即可</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="Hexo-官网"><a href="#Hexo-官网" class="headerlink" title="Hexo 官网"></a>Hexo 官网</h4><p> <a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化一个项目，hexoblog 是项目名</span></span><br><span class="line">hexo init  hexoblog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、进入hexoblog项目目录</span></span><br><span class="line"><span class="built_in">cd</span> hexoblog</span><br><span class="line"><span class="comment">#/2、安装 hexoblog 项目的依赖包</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">#/3、启动 hexoblog 项目服务</span></span><br><span class="line">hexo server</span><br><span class="line"><span class="comment">#此时，访问 http://localhost:4000/ 即可看到 hexo 默认的页面和一篇“Hello World”默认生成的文章</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">├── .deploy       <span class="comment"># 需要部署的文件</span></span><br><span class="line">├── node_modules  <span class="comment"># 项目所有的依赖包和插件</span></span><br><span class="line">├── public        <span class="comment"># 生成的静态网页文件</span></span><br><span class="line">├── scaffolds     <span class="comment"># 文章模板</span></span><br><span class="line">├── <span class="built_in">source</span>        <span class="comment"># 博客正文和其他源文件等都应该放在这里</span></span><br><span class="line">|   ├── _drafts   <span class="comment"># 草稿</span></span><br><span class="line">|   └── _posts    <span class="comment"># 文章</span></span><br><span class="line">├── themes        <span class="comment"># 主题</span></span><br><span class="line">├── _config.yml   <span class="comment"># 全局配置文件</span></span><br><span class="line">└── package.json  <span class="comment"># 项目依赖信息</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="将项目部署到码云"><a href="#将项目部署到码云" class="headerlink" title="将项目部署到码云"></a>将项目部署到码云</h4><p>在码云新建一个仓库,仓库名和路径要与用户名一致。</p>
<p>在项目根目录下安装git部署插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 之后就可以使用 hexo deploy（或简写 hexo d）将项目部署到gitee远程仓库</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>修改项目配置文件：_config.yml，在最下面，修改如下内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">仓库URL地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>使用命令 <strong>hexo d</strong> 将项目部署到 gitee 远程仓库，此时本地文件夹中出现有一个public文件夹。</p>
<p>开启 Gitee Pages 静态网页托管服务</p>
<p>next主题优化网上很多。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/03/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
